// For Library Version: 1.140.0

declare namespace sap {
  namespace sac {
    /**
     * Dragonfly Library. Provides models and control to access Multidimensional Data via InA protocol and Firefly
     * library
     *
     * @experimental As of version 1.108.
     */
    namespace df {
      namespace changeHandler {
        /**
         * Describes the settings that can be provided to the MultiDimModelChangeHandler constructor.
         *
         * @experimental As of version 1.120.
         */
        interface $MultiDimModelChangeHandlerSettings
          extends sap.ui.mdc.$ControlSettings {}

        /**
         * Control to handle changes of {@link sap.sac.df.model.MultiDimModel }. To store the changes in {@link sap.ui.fl.variants.VariantManagement }
         * you need to include this change handler control as a dependent somewhere in the view tree for which the
         * variant management is responsible. Each time new data is fetched and the event `dataLoaded` is fired
         * a new change will be created. The method `dataLoaded` needs to be called once to register the {@link sap.sac.df.model.MultiDimModel }
         * to the change handler.
         *
         * @experimental As of version 1.120.
         */
        class MultiDimModelChangeHandler extends sap.ui.mdc.Control {
          /**
           * Constructor for a new `MultiDimModelChangeHandler`.
           */
          constructor(
            /**
             * ID for the new control, generated automatically if no ID is given
             */
            sId?: string
          );

          /**
           * Creates a new subclass of class sap.sac.df.changeHandler.MultiDimModelChangeHandler with name `sClassName`
           * and enriches it with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.mdc.Control.extend}.
           *
           *
           * @returns Created class / constructor function
           */
          static extend<T extends Record<string, unknown>>(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: sap.ClassInfo<
              T,
              sap.sac.df.changeHandler.MultiDimModelChangeHandler
            >,
            /**
             * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
             * used by this class
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Returns a metadata object for class sap.sac.df.changeHandler.MultiDimModelChangeHandler.
           *
           *
           * @returns Metadata object describing this class
           */
          static getMetadata(): sap.ui.core.ElementMetadata;
          /**
           * Register {@link sap.sac.df.model.MultiDimModel} for handling changes
           */
          registerMultiDimModel(
            oMultiDimModel: sap.sac.df.model.MultiDimModel
          ): void;
          /**
           * Skip the triggering of the event `apply` once
           */
          skipApplyModelChangeOnce(): void;
        }
      }

      namespace model {
        namespace DataProvider {
          namespace Configuration {
            /**
             * Data provider configuration data source.
             *
             * @experimental As of version 1.135.
             */
            type DataSource = {
              /**
               * name
               */
              Name: string;
              /**
               * type
               */
              Type: sap.sac.df.types.DataSourceType;
              /**
               * system name
               */
              SystemName: string;
              /**
               * package
               */
              Package: string;
              /**
               * schema
               */
              Schema: string;
            };

            /**
             * Data provider configuration setup properties.
             *
             * @experimental As of version 1.135.
             */
            type SetupProperties = {
              /**
               * start with auto fetch
               */
              AutoFetch: boolean[];
            };
          }

          /**
           * Data provider configuration object.
           *
           * @experimental As of version 1.135.
           */
          type Configuration = {
            /**
             * name
             */
            Name: string;
            /**
             * data source
             */
            DataSource: sap.sac.df.model.DataProvider.Configuration.DataSource;
            /**
             * setup properties
             */
            SetupProperties: sap.sac.df.model.DataProvider.Configuration.SetupProperties;
            /**
             * semantic information
             */
            SemanticInfo: object;
          };
        }

        namespace visualization {
          namespace Grid {
            /**
             * Axes Layout object type.
             *
             * @experimental As of version 1.132.
             */
            type AxesLayout = {
              /**
               * dimensions on column axis
               */
              Columns: string[];
              /**
               * dimensions on row axis
               */
              Rows: string[];
              /**
               * members of measure structure dimension
               */
              MeasureStructureMembers: string[];
              /**
               * members of structure dimension
               */
              StructureMembers: string[];
            };
          }

          /**
           * Documents manager object
           *
           * **Structure of Exposed Data:**
           * ```javascript
           *
           * "ActiveDocumentsDirectory": "",
           * "DocumentsSupportType": ""
           * "IsBasedOnCDSView": ""
           * ```
           *
           *
           * @experimental As of version 1.119.
           */
          class Documents extends sap.ui.base.Object {
            /**
             * @ui5-protected Do not call from applications (only from related classes in the framework)
             */
            protected constructor();

            ActiveDocumentsDirectory: undefined;

            DocumentsSupportType: undefined;

            IsBasedOnCDSView: undefined;

            /**
             * Creates a new subclass of class sap.sac.df.model.visualization.Documents with name `sClassName` and enriches
             * it with the information contained in `oClassInfo`.
             *
             * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
             *
             *
             * @returns Created class / constructor function
             */
            static extend<T extends Record<string, unknown>>(
              /**
               * Name of the class being created
               */
              sClassName: string,
              /**
               * Object literal with information about the class
               */
              oClassInfo?: sap.ClassInfo<
                T,
                sap.sac.df.model.visualization.Documents
              >,
              /**
               * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
               * used by this class
               */
              FNMetaImpl?: Function
            ): Function;
            /**
             * Returns a metadata object for class sap.sac.df.model.visualization.Documents.
             *
             *
             * @returns Metadata object describing this class
             */
            static getMetadata(): sap.ui.base.Metadata;
            /**
             * Create and retrieve document in the document store
             *
             *
             * @returns a promise which resolves with the newly created document.
             */
            createAndRetrieveDocument(
              /**
               * the document ID
               */
              sDocumentId: undefined,
              /**
               * the content of the document
               */
              sContent: undefined,
              /**
               * properties (ideally as key-value-pair)
               */
              oProperties: undefined
            ): Promise<object>;
            /**
             * Create a document in the document store
             *
             *
             * @returns a promise which resolves to true if create operation is successful, otherwise false.
             */
            createDocument(
              /**
               * the document ID
               */
              sDocumentId: undefined,
              /**
               * the content of the document
               */
              sContent: undefined,
              /**
               * properties (ideally as key-value-pair)
               */
              oProperties: undefined
            ): Promise<boolean>;
            /**
             * Creates a document ID for a data cell in the result set
             *
             *
             * @returns a promise which resolves with the newly created document ID
             */
            createDocumentId(
              /**
               * the row index
               */
              nRowIndex: int,
              /**
               * the column index
               */
              nColumnIndex: int
            ): Promise<String>;
            /**
             * Delete a document in the document store
             *
             *
             * @returns a promise which resolves to true if delete operation is successful, otherwise false.
             */
            deleteDocument(
              /**
               * the document ID
               */
              sDocumentId: undefined
            ): Promise<boolean>;
            /**
             * Delete a document ID for a data cell in the result set
             *
             *
             * @returns a promise which resolves to true if the delete operation is successful, otherwise false.
             */
            deleteDocumentId(
              /**
               * the row index
               */
              nRowIndex: int,
              /**
               * the column index
               */
              nColumnIndex: int
            ): Promise<boolean>;
            /**
             * Get a document ID of a data cell in the result set
             *
             *
             * @returns a promise which resolves with the document ID
             */
            getDocumentId(
              /**
               * the row index
               */
              nRowIndex: int,
              /**
               * the column index
               */
              nColumnIndex: int
            ): Promise<String>;
            /**
             * Get the type of documents support.
             *
             *
             * @returns documents support type
             */
            getDocumentsSupportType(): sap.sac.df.types.DocumentsSupportType;
            /**
             * Retrieves a document from the document store
             *
             *
             * @returns a promise which resolves with the version(s) of the document.
             */
            retrieveDocument(
              /**
               * the document ID
               */
              sDocumentId: undefined,
              /**
               * the version of the document - if version is not supplied, returns all versions.
               */
              sVersion: undefined
            ): Promise<object>;
            /**
             * Retrieve multiple documents from the document store
             *
             *
             * @returns a promise which resolves with all documents and its versions.
             */
            retrieveMultipleDocuments(
              /**
               * the array of document IDs
               */
              aDocumentIds: undefined
            ): Promise<object>;
            /**
             * Is document storage supporting delete access
             *
             *
             * @returns if delete access is supported
             */
            supportsDelete(): boolean;
            /**
             * Is document storage supporting read access
             *
             *
             * @returns if read access is supported
             */
            supportsRead(): boolean;
            /**
             * Is document storage supporting write (create and change) access
             *
             *
             * @returns if write (create and change) access is supported
             */
            supportsWrite(): boolean;
          }
          /**
           * Grid Visualization Object
           *
           * @experimental As of version 1.132.
           */
          class Grid extends sap.ui.base.Object {
            /**
             * @ui5-protected Do not call from applications (only from related classes in the framework)
             */
            protected constructor();

            /**
             * Creates a new subclass of class sap.sac.df.model.visualization.Grid with name `sClassName` and enriches
             * it with the information contained in `oClassInfo`.
             *
             * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
             *
             *
             * @returns Created class / constructor function
             */
            static extend<T extends Record<string, unknown>>(
              /**
               * Name of the class being created
               */
              sClassName: string,
              /**
               * Object literal with information about the class
               */
              oClassInfo?: sap.ClassInfo<
                T,
                sap.sac.df.model.visualization.Grid
              >,
              /**
               * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
               * used by this class
               */
              FNMetaImpl?: Function
            ): Function;
            /**
             * Returns a metadata object for class sap.sac.df.model.visualization.Grid.
             *
             *
             * @returns Metadata object describing this class
             */
            static getMetadata(): sap.ui.base.Metadata;
            /**
             * Get active template
             *
             *
             * @returns active template
             */
            getActiveTemplate(): sap.sac.df.types.configuration.TableTemplate;
            /**
             * Get the current axes layout for rows and columns
             *
             *
             * @returns columns and rows axes layout object
             */
            getAxesLayout(): sap.sac.df.model.visualization.Grid.AxesLayout;
            /**
             * Gets the cell context for a cell in the result set
             *
             *
             * @returns a promise which resolves with the retrieved cell context
             */
            getCellContext(
              /**
               * the row index of data cell
               */
              nRowIndex: int,
              /**
               * the column index of data cell
               */
              nColumnIndex: int
            ): Promise<Object>;
            /**
             * Get the data of the visualization
             * ```javascript
             *
             * "Cells": [],
             * "TotalColumns": Integer,
             * "TotalRows": Integer
             * ```
             *
             *
             *
             * @returns a promise which resolves with the visualization data
             */
            getVisualizationData(): Promise<Object>;
            /**
             * Set active template
             *
             *
             * @returns resolving to the axes layout object to allow chaining
             */
            setActiveTemplate(
              /**
               * styling template name
               */
              sTemplateName: string
            ): sap.sac.df.model.visualization.Grid;
            /**
             * Set the dimensions on row and column axis
             *
             *
             * @returns resolving to the axes layout object to allow chaining
             */
            setAxesLayout(
              /**
               * an object containing the names of the dimensions on row and column axis. The order of the dimensions
               * control the position on the axis.
               */
              oAxisLayout: sap.sac.df.model.visualization.Grid.AxesLayout
            ): sap.sac.df.model.visualization.Grid;
          }
        }
        /**
         * Parameters of the DataProvider#dataUpdated event.
         */
        interface DataProvider$DataUpdatedEventParameters {}

        /**
         * Parameters of the DataProvider#visualizationAdded event.
         */
        interface DataProvider$VisualizationAddedEventParameters {}

        /**
         * Parameters of the DataProvider#visualizationRemoved event.
         */
        interface DataProvider$VisualizationRemovedEventParameters {}

        /**
         * Parameters of the MultiDimModel#dataLoaded event.
         */
        interface MultiDimModel$DataLoadedEventParameters {}

        /**
         * Parameters of the MultiDimModel#dataProviderAdded event.
         */
        interface MultiDimModel$DataProviderAddedEventParameters {}

        /**
         * Parameters of the MultiDimModel#dataProviderRemoved event.
         */
        interface MultiDimModel$DataProviderRemovedEventParameters {}

        /**
         * Parameters of the MultiDimModel#dataProviderUpdated event.
         */
        interface MultiDimModel$DataProviderUpdatedEventParameters {}

        /**
         * Parameters of the MultiDimModel#loaded event.
         */
        interface MultiDimModel$LoadedEventParameters {}

        /**
         * Parameters of the MultiDimModel#variableGroupsAdded event.
         */
        interface MultiDimModel$VariableGroupsAddedEventParameters {}

        /**
         * Configuration of the multidimensional model and its components
         *
         * @experimental As of version 1.132.
         */
        class Configuration extends sap.ui.base.Object {
          /**
           * @ui5-protected Do not call from applications (only from related classes in the framework)
           */
          protected constructor();

          /**
           * Creates a new subclass of class sap.sac.df.model.Configuration with name `sClassName` and enriches it
           * with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
           *
           *
           * @returns Created class / constructor function
           */
          static extend<T extends Record<string, unknown>>(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: sap.ClassInfo<T, sap.sac.df.model.Configuration>,
            /**
             * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
             * used by this class
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Returns a metadata object for class sap.sac.df.model.Configuration.
           *
           *
           * @returns Metadata object describing this class
           */
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Gets current value of property {@link #getCalculations Calculations}.
           *
           * Calculations
           *
           * Default value is `true`.
           *
           * @experimental As of version 1.132.
           *
           * @returns Value of property `Calculations`
           */
          getCalculations(): boolean;
          /**
           * Gets current value of property {@link #getCommenting Commenting}.
           *
           * Commenting
           *
           * Default value is `false`.
           *
           * @experimental As of version 1.132.
           *
           * @returns Value of property `Commenting`
           */
          getCommenting(): boolean;
          /**
           * Gets current value of property {@link #getContextMenuVariant ContextMenuVariant}.
           *
           * Variant of context menu configuration
           *
           * Default value is `sapui5`.
           *
           * @experimental As of version 1.132.
           *
           * @returns Value of property `ContextMenuVariant`
           */
          getContextMenuVariant(): /* was: sap.sac.df.types.configuration.ContextMenuVariant */ any;
          /**
           * Gets current value of property {@link #getImplicitVariableHandling ImplicitVariableHandling}.
           *
           * Implicit variable handling
           *
           * Default value is `false`.
           *
           * @experimental As of version 1.136.
           *
           * @returns Value of property `ImplicitVariableHandling`
           */
          getImplicitVariableHandling(): boolean;
          /**
           * Gets current value of property {@link #getStylingPanelItems StylingPanelItems}.
           *
           * Styling Panel Items
           *
           * Default value is `[TableProperties, NumberFormatting]`.
           *
           * @experimental As of version 1.132.
           *
           * @returns Value of property `StylingPanelItems`
           */
          getStylingPanelItems(): sap.sac.df.types.configuration.StylingPanelItem[];
          /**
           * Gets current value of property {@link #getTableTemplates TableTemplates}.
           *
           * Available Table Templates
           *
           * Default value is `[Default, Basic]`.
           *
           * @experimental As of version 1.135.
           *
           * @returns Value of property `TableTemplates`
           */
          getTableTemplates(): sap.sac.df.types.configuration.TableTemplate[];
          /**
           * Gets current value of property {@link #getTableTemplateSelection TableTemplateSelection}.
           *
           * Default table template selection
           *
           * Default value is `TableTemplate.Default`.
           *
           * @experimental As of version 1.135.
           *
           * @returns Value of property `TableTemplateSelection`
           */
          getTableTemplateSelection(): String;
          /**
           * Sets a new value for property {@link #getCalculations Calculations}.
           *
           * Calculations
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `true`.
           *
           * @experimental As of version 1.132.
           *
           * @returns Reference to `this` in order to allow method chaining
           */
          setCalculations(
            /**
             * New value for property `Calculations`
             */
            bCalculations?: boolean
          ): this;
          /**
           * Sets a new value for property {@link #getCommenting Commenting}.
           *
           * Commenting
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           *
           * @experimental As of version 1.132.
           *
           * @returns Reference to `this` in order to allow method chaining
           */
          setCommenting(
            /**
             * New value for property `Commenting`
             */
            bCommenting?: boolean
          ): this;
          /**
           * Sets a new value for property {@link #getContextMenuVariant ContextMenuVariant}.
           *
           * Variant of context menu configuration
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `sapui5`.
           *
           * @experimental As of version 1.132.
           *
           * @returns Reference to `this` in order to allow method chaining
           */
          setContextMenuVariant(
            /**
             * New value for property `ContextMenuVariant`
             */
            sContextMenuVariant?: /* was: sap.sac.df.types.configuration.ContextMenuVariant */ any
          ): this;
          /**
           * Sets a new value for property {@link #getImplicitVariableHandling ImplicitVariableHandling}.
           *
           * Implicit variable handling
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `false`.
           *
           * @experimental As of version 1.136.
           *
           * @returns Reference to `this` in order to allow method chaining
           */
          setImplicitVariableHandling(
            /**
             * New value for property `ImplicitVariableHandling`
             */
            bImplicitVariableHandling?: boolean
          ): this;
          /**
           * Sets a new value for property {@link #getStylingPanelItems StylingPanelItems}.
           *
           * Styling Panel Items
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `[TableProperties, NumberFormatting]`.
           *
           * @experimental As of version 1.132.
           *
           * @returns Reference to `this` in order to allow method chaining
           */
          setStylingPanelItems(
            /**
             * New value for property `StylingPanelItems`
             */
            sStylingPanelItems?: sap.sac.df.types.configuration.StylingPanelItem[]
          ): this;
          /**
           * Sets a new value for property {@link #getTableTemplates TableTemplates}.
           *
           * Available Table Templates
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `[Default, Basic]`.
           *
           * @experimental As of version 1.135.
           *
           * @returns Reference to `this` in order to allow method chaining
           */
          setTableTemplates(
            /**
             * New value for property `TableTemplates`
             */
            sTableTemplates?: sap.sac.df.types.configuration.TableTemplate[]
          ): this;
          /**
           * Sets a new value for property {@link #getTableTemplateSelection TableTemplateSelection}.
           *
           * Default table template selection
           *
           * When called with a value of `null` or `undefined`, the default value of the property will be restored.
           *
           * Default value is `TableTemplate.Default`.
           *
           * @experimental As of version 1.135.
           *
           * @returns Reference to `this` in order to allow method chaining
           */
          setTableTemplateSelection(
            /**
             * New value for property `TableTemplateSelection`
             */
            sTableTemplateSelection?: String
          ): this;
        }
        /**
         * A data provider is an analytical query exposed via an analytical engine and accessed via InA protocol.
         * It represents a navigable query manager and allows to access and change data. Instances of this class
         * should only be created by the {@link sap.sac.df.model.MultiDimModel}.
         *
         * **Structure of Exposed Data:**
         * ```javascript
         *
         * "Name": "",
         * "DataSourceInfo": { },
         * "Variables": { }
         * "Dimensions": { },
         * "Measures": [ ],
         * "Messages": [ ]
         * "AutoFetchEnabled": ""
         * ```
         *
         *
         * @experimental As of version 1.119.
         */
        class DataProvider extends sap.ui.model.json.JSONModel {
          /**
           * @ui5-protected Do not call from applications (only from related classes in the framework)
           */
          protected constructor();
          /**
           * Indicator if the result set should be fetched automatically. The default value is true.
           */
          AutoFetchEnabled: boolean;

          /**
           * DataSourceInfo
           */
          DataSourceInfo: sap.sac.df.model.DataSourceInfo;

          /**
           * Dimensions
           */
          Dimensions: Record<string, sap.sac.df.model.Dimension>;

          /**
           * Measures
           */
          Measures: Record<string, /* was: sap.sac.df.model.Measure */ any>;

          /**
           * Variables
           */
          Variables: Record<string, sap.sac.df.model.Variable>;

          /**
           * Visualizations
           */
          Visualizations: Record<
            string,
            /* was: sap.sac.df.model.Visualization */ any
          >;

          /**
           * Creates a new subclass of class sap.sac.df.model.DataProvider with name `sClassName` and enriches it
           * with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.model.json.JSONModel.extend}.
           *
           *
           * @returns Created class / constructor function
           */
          static extend<T extends Record<string, unknown>>(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: sap.ClassInfo<T, sap.sac.df.model.DataProvider>,
            /**
             * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
             * used by this class
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Returns a metadata object for class sap.sac.df.model.DataProvider.
           *
           *
           * @returns Metadata object describing this class
           */
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Add new visualization
           *
           *
           * @returns Returns visualization
           */
          addVisualization(
            /**
             * visualization name
             */
            sName: string,
            /**
             * type of visualization
             */
            sType: /* was: sap.sac.df.types.VisualizationType */ any
          ): /* was: sap.sac.df.model.Visualization */ any;
          /**
           * Execute scenario on data provider
           *
           * @experimental As of version 1.134.
           *
           * @returns Promise with reference to created scenario
           */
          createScenario(
            /**
             * scenario
             */
            sScenarioId: undefined
          ): Promise</* was: sap.sac.df.Scenario */ any>;
          /**
           * Updates the multidimensional model from the given the state of a data provider
           *
           *
           * @returns Promise with reference to this in order to allow method chaining
           */
          deserialize(
            /**
             * the JSON object containing the persisted state of a data provider to be applied.
             */
            oModelState: object,
            /**
             * Format of the serialization (INA_REPOSITORY_DELTA or INA_REPOSITORY).
             */
            sFormat?: string,
            /**
             * Indicator if the data provider updated should be suppressed after deserialization
             */
            bSuppressUpdate?: boolean
          ): Promise<this>;
          /**
           * Export Data
           */
          exportData(
            /**
             * Data export configuration
             */
            oDataExportConfig: object
          ): void;
          /**
           * Fires event {@link #event:dataUpdated dataUpdated} to attached listeners.
           *
           *
           * @returns Reference to this in order to allow method chaining
           */
          fireDataUpdated(
            /**
             * Parameters to pass along with the event
             */
            oParameters?: object
          ): this;
          /**
           * Fires event {@link #event:visualizationAdded visualizationAdded} to attached listeners.
           *
           *
           * @returns Reference to this in order to allow method chaining
           */
          fireVisualizationAdded(
            /**
             * Parameters to pass along with the event
             */
            oParameters?: object
          ): this;
          /**
           * Fires event {@link #event:visualizationRemoved visualizationRemoved} to attached listeners.
           *
           *
           * @returns Reference to this in order to allow method chaining
           */
          fireVisualizationRemoved(
            /**
             * Parameters to pass along with the event
             */
            oParameters?: object
          ): this;
          /**
           * Get the property AutoFetchEnabled
           */
          getAutoFetchEnabled(): boolean;
          /**
           * Get data source information
           *
           *
           * @returns data source information object
           */
          getDataSourceInfo(): sap.sac.df.model.DataSourceInfo;
          /**
           * Get the scaling factor of a measure or cell
           *
           *
           * @returns Number of decimal places
           */
          getDecimalPlaces(
            /**
             * Measure structure member
             */
            sMeasureStructureMember: string,
            /**
             * Structure (non-measure) member
             */
            sStructureMember: string
          ): int;
          /**
           * Get Dimension
           *
           *
           * @returns Dimension object
           */
          getDimension(
            /**
             * Dimension name
             */
            sDimensionName: string
          ): sap.sac.df.model.Dimension;
          /**
           * Get all dimensions
           *
           *
           * @returns Object of all dimensions
           */
          getDimensions(): Record<string, sap.sac.df.model.Dimension>;
          /**
           * Get grid visualization
           *
           *
           * @returns visualization object if found
           */
          getGridVisualization(): /* was: sap.sac.df.model.Visualization */ any;
          /**
           * Get measure
           *
           *
           * @returns Measure object
           */
          getMeasure(
            /**
             * Measure name
             */
            sMeasureName: string
          ): /* was: sap.sac.df.model.Measure */ any;
          /**
           * Get all measures
           *
           *
           * @returns Object of all measures
           */
          getMeasures(): Record<
            string,
            /* was: sap.sac.df.model.Measure */ any
          >;
          /**
           * Get Measure Structure Dimension
           *
           *
           * @returns Measure structure dimension
           */
          getMeasureStructureDimension(): sap.sac.df.model.Dimension;
          /**
           * Get the scaling factor of a measure or cell
           *
           *
           * @returns Scaling factor
           */
          getScalingFactor(
            /**
             * Measure structure member
             */
            sMeasureStructureMember: string,
            /**
             * Structure (non-measure) member
             */
            sStructureMember: string
          ): int;
          /**
           * Get structure (non-measure) dimension
           *
           *
           * @returns Structure dimension object
           */
          getStructureDimension(): sap.sac.df.model.Dimension;
          /**
           * Get Variable
           *
           *
           * @returns Variable object
           */
          getVariable(
            /**
             * Variable Name
             */
            sVariableName: string
          ): sap.sac.df.model.Variable;
          /**
           * Get all variables
           *
           *
           * @returns Object of all variables
           */
          getVariables(): Record<string, sap.sac.df.model.Variable>;
          /**
           * Get visualization
           *
           *
           * @returns visualization object if found
           */
          getVisualization(
            /**
             * visualization name
             */
            sName: String
          ): /* was: sap.sac.df.model.Visualization */ any;
          /**
           * Get all visualizations
           *
           *
           * @returns Object of all visualizations
           */
          getVisualizations(): Record<
            string,
            /* was: sap.sac.df.model.Visualization */ any
          >;
          /**
           * Remove existing visualization from data provider
           *
           *
           * @returns Promise which resolves when the removing s finished
           */
          removeVisualization(
            /**
             * visualization name
             */
            sName: string
          ): Promise<void>;
          /**
           * Serialize the data provider state to a JSON representation
           *
           *
           * @returns A JSON object which represents the data provider
           */
          serialize(
            /**
             * Format of the serialization (INA_REPOSITORY_DELTA or INA_REPOSITORY)
             */
            sFormat?: string
          ): object;
          /**
           * Set the property `AutoFetchEnabled`, if the data should be automatically be refreshed on invalid.
           */
          setAutoFetchEnabled(bAutoFetchEnabled: boolean): void;
          /**
           * Set the number of decimal places of a measure or cell
           *
           *
           * @returns Reference to this in order to allow method chaining
           */
          setDecimalPlaces(
            /**
             * Number of the decimal places
             */
            nNumberOfDecimalPlaces: int,
            /**
             * Measure structure member
             */
            sMeasureStructureMember: string,
            /**
             * Structure (non-measure) member
             */
            sStructureMember: string
          ): this;
          /**
           * Set the scaling factor of a measure or cell
           *
           *
           * @returns Reference to this in order to allow method chaining
           */
          setScalingFactor(
            /**
             * Scaling factor
             */
            nFactor: int,
            /**
             * Measure structure member
             */
            sMeasureStructureMember: string,
            /**
             * Structure (non-measure) member
             */
            sStructureMember: string
          ): this;
          /**
           * Checks whether an InA capability is supported by the server. Throws an error for unhandled capabilities.
           * List of handled capabilities can be seen in type {@link sap.sac.df.model.Capability}
           *
           *
           * @returns Returns true, if the capability is supported, else false
           */
          supportsCapability(
            /**
             * Capability name
             */
            sCapability: undefined
          ): boolean;
        }
        /**
         * Data source information.
         *
         * **Structure of Exposed Data:**
         * ```javascript
         *
         *  "QueryTitle": "",
         *  "QueryName": "",
         *  "QueryType": "",
         *  "SystemName": "",
         *  "CreatedBy": "",
         *  "CreatedOn": "",
         *  "QueryDueDateText": "",
         *  "CreatedOnText": "",
         *  "QueryDueDate": "",
         *  "ResultAlignmentRows": "",
         *  "ResultAlignmentColumns": "",
         *  "LastUpdated": "",
         *  "LastUpdatedBy": "",
         *  "LastUpdatedText": ""
         * ```
         *
         *
         * @experimental As of version 1.119.
         */
        class DataSourceInfo extends sap.ui.base.Object {
          /**
           * @ui5-protected Do not call from applications (only from related classes in the framework)
           */
          protected constructor();

          /**
           * Creates a new subclass of class sap.sac.df.model.DataSourceInfo with name `sClassName` and enriches it
           * with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
           *
           *
           * @returns Created class / constructor function
           */
          static extend<T extends Record<string, unknown>>(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: sap.ClassInfo<T, sap.sac.df.model.DataSourceInfo>,
            /**
             * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
             * used by this class
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Returns a metadata object for class sap.sac.df.model.DataSourceInfo.
           *
           *
           * @returns Metadata object describing this class
           */
          static getMetadata(): sap.ui.base.Metadata;
        }
        /**
         * Dimension Object
         *
         * **Structure of Exposed Data:**
         * ```javascript
         *
         * "Name": "",
         * "TechName": "",
         * "Description": "",
         * "Axis": "",
         * "Type": "",
         * "HierarchyActive": "",
         * "HasFilter": "",
         * "MemberFilter": [],
         * "SortDirection": "",
         * "Position": "",
         * "LastPosition": "",
         * "IsStructure": "",
         * "IsMeasureStructure": "",
         * "ValueType": "",
         * "SemanticObject": "",
         * "Members": [{
         *   "Key": "",
         *   "Name": "",
         *   "TechName": "",
         *   "Description": "",
         *   "SemanticObject": "
         * }],
         * "SupportedOperators": ["EQ"]
         * ```
         *
         *
         * @experimental As of version 1.119.
         */
        class Dimension extends sap.ui.base.Object {
          /**
           * @ui5-protected Do not call from applications (only from related classes in the framework)
           */
          protected constructor();

          /**
           * Creates a new subclass of class sap.sac.df.model.Dimension with name `sClassName` and enriches it with
           * the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
           *
           *
           * @returns Created class / constructor function
           */
          static extend<T extends Record<string, unknown>>(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: sap.ClassInfo<T, sap.sac.df.model.Dimension>,
            /**
             * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
             * used by this class
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Returns a metadata object for class sap.sac.df.model.Dimension.
           *
           *
           * @returns Metadata object describing this class
           */
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Add dimension filters
           *
           *
           * @returns Reference to this in order to allow method chaining
           */
          addMemberFilter(
            /**
             * a member filter object
             */
            oMemberFilter: /* was: sap.sac.df.model.MemberFilter */ any
          ): this;
          /**
           * Add a member filter by its (internal) key
           *
           *
           * @returns Reference to this in order to allow method chaining
           */
          addMemberFilterByKey(
            /**
             * (internal) key of a dimension member
             */
            sKey: string
          ): this;
          /**
           * Clear the filter of a dimension
           *
           *
           * @returns Reference to this in order to allow method chaining
           */
          clearMemberFilter(): this;
          /**
           * Get effective dimension filters
           *
           *
           * @returns array of member filters
           */
          getMemberFilter(): /* was: sap.sac.df.model.MemberFilter */ any[];
          /**
           * Move dimension one position down on its axis
           *
           *
           * @returns Reference to this in order to allow method chaining
           */
          moveDown(): this;
          /**
           * Move dimension one position up on it's axis
           *
           *
           * @returns Reference to this in order to allow method chaining
           */
          moveUp(): this;
          /**
           * Open a dialog to display and change the settings of a dimension of the `DataProvider`
           *
           *
           * @returns indicator whether the dialog was confirmed or canceled
           */
          openPropertyDialog(): Promise<boolean>;
          /**
           * Open a dialog to display and change the filter on a dimension
           *
           *
           * @returns resolving to a boolean which is false when the dialog is cancelled and true if is was closed
           * with Ok and dynamic filters of the given dimension are updated
           */
          openValueHelpDialog(): Promise<any>;
          /**
           * Read hierarchy
           *
           *
           * @returns resolving to the object of hierarchy nodes.
           */
          readHierarchy(
            /**
             * level
             */
            iLevel: int
          ): Object;
          /**
           * Remove a drill operation on a dimension member
           *
           *
           * @returns Reference to this in order to allow method chaining
           */
          removeDrilldown(): this;
          /**
           * Remove the filter of a dimension
           *
           *
           * @returns Reference to this in order to allow method chaining
           */
          removeMemberFilter(
            /**
             * a member filter object
             */
            oMemberFilter: /* was: sap.sac.df.model.MemberFilter */ any
          ): this;
          /**
           * Remove a member filter by its (internal) key
           *
           *
           * @returns Reference to this in order to allow method chaining
           */
          removeMemberFilterByKey(
            /**
             * (internal) key of a dimension member
             */
            sKey: string
          ): this;
          /**
           * Set Display Type of Dimension
           *
           *
           * @returns } resolving to the Dimension to allow chaining.
           */
          setDimensionDisplay(
            /**
             * level
             */
            sDisplayType: string
          ): sap.sac.df.model.Dimension;
          /**
           * Set Display Hierarchy
           *
           *
           * @returns resolving to the `Dimension` to allow chaining.
           */
          setDisplayHierarchy(
            /**
             * whether the hierarchy should be activated
             */
            bActive: boolean,
            /**
             * the name of the hierarchy (optional)
             */
            sHierarchyName: string,
            /**
             * the version of the hierarchy (optional)
             */
            sVersion: string
          ): sap.sac.df.model.Dimension;
          /**
           * Set hierarchy drill level
           *
           *
           * @returns resolving to the `Dimension` to allow chaining.
           */
          setHierarchyDrillLevel(
            /**
             * drill level (from root)
             */
            iDrillLevel: int
          ): sap.sac.df.model.Dimension;
          /**
           * Set dimension filters
           *
           *
           * @returns Reference to this in order to allow method chaining
           */
          setMemberFilter(
            /**
             * array of member filters
             */
            aMemberFilter: /* was: sap.sac.df.model.MemberFilter */ any[]
          ): this;
          /**
           * Set a member filter by its (internal) key
           *
           *
           * @returns Reference to this in order to allow method chaining
           */
          setMemberFilterByKey(
            /**
             * (internal) key of a dimension member
             */
            sKey: string
          ): this;
          /**
           * Sort the members of a dimension
           *
           *
           * @returns Reference to this in order to allow method chaining
           */
          sort(
            /**
             * of sorting
             */
            direction: sap.sac.df.types.SortDirection,
            /**
             * of sorting
             */
            type: sap.sac.df.types.SortType,
            /**
             * in case of a measure structure the member according to which is sorted
             */
            sMeasureStructureMember: string,
            /**
             * in case of a secondary structure the member according to which is sorted
             */
            sStructureMember: string
          ): this;
          /**
           * Move dimension to the columns axis
           *
           *
           * @returns Reference to this in order to allow method chaining
           */
          toColumns(): this;
          /**
           * Move dimension to the rows axis
           *
           *
           * @returns Reference to this in order to allow method chaining
           */
          toRows(): this;
        }
        /**
         * The multidimensional model allows to access and change data accessed via the InA Protocol. The multidimensional
         * model populate it's exposed data in JSON format via binding to controls.
         *
         * **Structure of Exposed Data:**
         * ```javascript
         *
         * "DataProviders": { },
         * "VariableGroups": { },
         * "Messages": [ ]
         * ```
         *
         *
         * @experimental As of version 1.119.
         */
        class MultiDimModel extends sap.ui.model.json.JSONModel {
          /**
           * Constructor for a new MultiDimModel. After model creation you need to wait for the event {@link #event:loaded loaded}.
           */
          constructor(
            /**
             * ID for the new control, generated automatically if no ID is given
             */
            sId?: string,
            /**
             * Initial settings for the new control.
             */
            mSettings?: object
          );
          /**
           * Configuration
           */
          Configuration: Record<string, sap.sac.df.model.Configuration>;

          /**
           * Data Providers
           */
          DataProviders: Record<string, sap.sac.df.model.DataProvider>;

          /**
           * Messages
           */
          Messages: sap.ui.core.message.Message[];

          /**
           * Variable Groups
           */
          VariableGroups: Record<string, sap.sac.df.model.VariableGroup>;

          /**
           * Creates a new subclass of class sap.sac.df.model.MultiDimModel with name `sClassName` and enriches it
           * with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.model.json.JSONModel.extend}.
           *
           *
           * @returns Created class / constructor function
           */
          static extend<T extends Record<string, unknown>>(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: sap.ClassInfo<T, sap.sac.df.model.MultiDimModel>,
            /**
             * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
             * used by this class
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Returns a metadata object for class sap.sac.df.model.MultiDimModel.
           *
           *
           * @returns Metadata object describing this class
           */
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Creates a new data provider and attaches it to the model.
           *
           *
           * @returns Promise which resolves the created data provider
           */
          addDataProvider(
            /**
             * Data provider name
             */
            sDataProviderName: string,
            /**
             * Datasource name which the data provider is supposed to expose
             */
            sDataSourceName:
              | sap.sac.df.model.DataProvider.Configuration
              | string,
            /**
             * System name
             */
            sSystem?: string,
            /**
             * Package name
             */
            sPackage?: string,
            /**
             * Schema name
             */
            sSchema?: string,
            /**
             * Data source type
             */
            sDataSourceType?: sap.sac.df.types.DataSourceType,
            /**
             * if the data should be fetched automatically
             */
            bAutoFetchEnabled?: boolean
          ): Promise<sap.sac.df.model.DataProvider>;
          /**
           * Creates a new variable group and attaches it to the model.
           *
           * A variable group defines which variables of the underlying data providers should behave as the same variable.
           * The group is defined by a name and a rule. The first added variable becomes automatically the `MergedVariable`.
           *
           *
           * @returns created variable group
           */
          createVariableGroup(
            /**
             * Variable group name
             */
            sVariableGroupName: string,
            /**
             * Rule is a function which accept the variable definition and decides if the variable has to be part of
             * te group.
             */
            fnRule: Function,
            /**
             * Additional properties
             */
            oProperties: Object
          ): sap.sac.df.model.VariableGroup;
          /**
           * Updates the model from the given the model state including all aggregated data providers
           *
           *
           * @returns Promise with reference to this in order to allow method chaining
           */
          deserialize(
            /**
             * A JSON object which represents the multidimensional model to be applied
             */
            oModelState: object,
            /**
             * Format of the serialization (INA_REPOSITORY_DELTA or INA_REPOSITORY).
             */
            sFormat?: string
          ): Promise<this>;
          /**
           * Ensures all aggregated data providers are destroyed.
           *
           *
           * @returns Promise which resolves when destroy is finished.
           */
          destroy(): Promise<any>;
          /**
           * Fires event {@link #event:dataProviderAdded dataProviderAdded} to attached listeners.
           *
           *
           * @returns Reference to this in order to allow method chaining
           */
          fireDataProviderAdded(
            /**
             * Parameters to pass along with the event
             */
            oParameters?: object
          ): this;
          /**
           * Fires event {@link #event:dataProviderRemoved dataProviderRemoved} to attached listeners.
           *
           *
           * @returns Reference to this in order to allow method chaining
           */
          fireDataProviderRemoved(
            /**
             * Parameters to pass along with the event
             */
            oParameters?: object
          ): this;
          /**
           * Fires event {@link #event:dataProviderUpdated dataProviderUpdated} to attached listeners.
           *
           *
           * @returns Reference to this in order to allow method chaining
           */
          fireDataProviderUpdated(
            /**
             * Parameters to pass along with the event
             */
            oParameters?: object
          ): this;
          /**
           * Fires event {@link #event:variableGroupsAdded variableGroupsAdded} to attached listeners.
           *
           *
           * @returns Reference to this in order to allow method chaining
           */
          fireVariableGroupsAdded(
            /**
             * Parameters to pass along with the event
             */
            oParameters?: object
          ): this;
          /**
           * Get context menu provider registry
           *
           *
           * @returns sap.sac.df.model.extentsions.contextMenu.ContextMenuProviderRegistry
           */
          getContextMenuProviderRegistry(): undefined;
          /**
           * Get a data provider
           *
           *
           * @returns Data provider object if found
           */
          getDataProvider(
            /**
             * Data provider name
             */
            sDataProviderName: string
          ): sap.sac.df.model.DataProvider;
          /**
           * Get all data providers
           *
           *
           * @returns Object of all data providers
           */
          getDataProviders(): Record<string, sap.sac.df.model.DataProvider>;
          /**
           * Get grid styling template registry
           *
           * @deprecated As of version 1.135. the concept has been discarded.
           *
           * @returns sap.sac.df.model.extentsions.styling.GridStylingTemplateRegistry
           */
          getGridStylingTemplateRegistry(): undefined;
          /**
           * Get all messages
           *
           *
           * @returns Array of messages
           */
          getMessages(): sap.ui.core.message.Message[];
          /**
           * Get a variable group
           *
           *
           * @returns Variable group object
           */
          getVariableGroup(
            /**
             * Variable group name
             */
            sVariableGroupName: string
          ): sap.sac.df.model.VariableGroup;
          /**
           * Get all variable groups
           *
           *
           * @returns Object of all variable groups
           */
          getVariableGroups(): Record<string, sap.sac.df.model.VariableGroup>;
          /**
           * Remove existing data provider from the model.
           *
           *
           * @returns Promise which resolves when the removing s finished
           */
          removeDataProvider(
            /**
             * Data provider name to be removed
             */
            sDataProviderName: string
          ): Promise<void>;
          /**
           * Reset the model to the initial state
           *
           *
           * @returns Promise which resolves when reset is finished.
           */
          resetModel(): Promise<void>;
          /**
           * Serialize the model with all aggregated data providers to a JSON representation
           *
           *
           * @returns A JSON object which represents the multidimensional model
           */
          serialize(
            /**
             * Format of the serialization (INA_REPOSITORY_DELTA or INA_REPOSITORY)
             */
            sFormat?: string
          ): object;
          /**
           * Resets the messages
           */
          setMessages(
            /**
             * The new messages for the model, mapping a binding path to an array of sap.ui.core.message.Message objects
             */
            mMessages: Record<string, sap.ui.core.message.Message[]>
          ): void;
          /**
           * Set variable groups.
           *
           * A variable group defines which variables of the underlying data providers should behave as the same variable.
           * The group is defined by a name and a rule. The first added variable becomes automatically the `MergedVariable`.
           *
           *
           * @returns Promise which resolves the created variable group
           */
          setVariableGroups(
            /**
             * array of variable groups
             */
            aVariableGroups: sap.sac.df.model.VariableGroup[]
          ): Promise<sap.sac.df.model.VariableGroup[]>;
        }
        /**
         * Variable Object
         *
         * **Structure of Exposed Data:**
         * ```javascript
         *
         * "Name": "",
         * "Dimension": "",
         * "ValueType": "",
         * "VariableType": "",
         * "Description": "",
         * "Mandatory": "",
         * "SupportsMultipleValues": "",
         * "TechName": "",
         * "InputEnabled": "",
         * "Position": ""
         * "SupportsValueHelp": "",
         * "DataProviderName": "",
         * "MemberFilter": []
         * ```
         *
         *
         * @experimental As of version 1.119.
         */
        class Variable extends sap.ui.base.Object {
          /**
           * @ui5-protected Do not call from applications (only from related classes in the framework)
           */
          protected constructor();

          /**
           * Creates a new subclass of class sap.sac.df.model.Variable with name `sClassName` and enriches it with
           * the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
           *
           *
           * @returns Created class / constructor function
           */
          static extend<T extends Record<string, unknown>>(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: sap.ClassInfo<T, sap.sac.df.model.Variable>,
            /**
             * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
             * used by this class
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Returns a metadata object for class sap.sac.df.model.Variable.
           *
           *
           * @returns Metadata object describing this class
           */
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Add variable filters
           *
           *
           * @returns Reference to this in order to allow method chaining
           */
          addMemberFilter(
            /**
             * a member filter object
             */
            oMemberFilter: /* was: sap.sac.df.model.MemberFilter */ any
          ): this;
          /**
           * Add a member filter by its (internal) key
           *
           *
           * @returns Reference to this in order to allow method chaining
           */
          addMemberFilterByKey(
            /**
             * (internal) key of a dimension member
             */
            sKey: string
          ): this;
          /**
           * Clear variable filter
           *
           *
           * @returns Reference to this in order to allow method chaining
           */
          clearMemberFilter(): this;
          /**
           * Get effective variable filters
           *
           *
           * @returns array of member filters
           */
          getMemberFilter(): /* was: sap.sac.df.model.MemberFilter */ any[];
          /**
           * Open a dialog to display and change the filter on a variable
           *
           *
           * @returns resolving to a boolean which is false when the dialog is cancelled and true if is was closed
           * with Ok and dynamic filters of the given dimension are updated
           */
          openValueHelpDialog(): Promise<any>;
          /**
           * Remove variable filter
           *
           *
           * @returns Reference to this in order to allow method chaining
           */
          removeMemberFilter(
            /**
             * a member filter object
             */
            oMemberFilter: /* was: sap.sac.df.model.MemberFilter */ any
          ): this;
          /**
           * Remove a member filter by its (internal) key
           *
           *
           * @returns Reference to this in order to allow method chaining
           */
          removeMemberFilterByKey(
            /**
             * (internal) key of a dimension member
             */
            sKey: string
          ): this;
          /**
           * Set variable filters
           *
           *
           * @returns Reference to this in order to allow method chaining
           */
          setMemberFilter(
            /**
             * array of member filters
             */
            aMemberFilter: /* was: sap.sac.df.model.MemberFilter */ any[]
          ): this;
          /**
           * Set a member filter by its (internal) key
           *
           *
           * @returns Reference to this in order to allow method chaining
           */
          setMemberFilterByKey(
            /**
             * (internal) key of a dimension member
             */
            sKey: string
          ): this;
        }
        /**
         * Variable Group Object
         *
         * **Structure of Exposed Data:**
         * ```javascript
         *
         * "Name": "",
         * "MergedVariable": { },
         * "Rule": function () {}
         * ```
         *
         *
         * @experimental As of version 1.119.
         */
        class VariableGroup extends sap.ui.base.Object {
          /**
           * @ui5-protected Do not call from applications (only from related classes in the framework)
           */
          protected constructor();
          /**
           * Merged Variable
           */
          MergedVariable: sap.sac.df.model.Variable;

          /**
           * Name
           */
          Name: string;

          /**
           * Creates a new subclass of class sap.sac.df.model.VariableGroup with name `sClassName` and enriches it
           * with the information contained in `oClassInfo`.
           *
           * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
           *
           *
           * @returns Created class / constructor function
           */
          static extend<T extends Record<string, unknown>>(
            /**
             * Name of the class being created
             */
            sClassName: string,
            /**
             * Object literal with information about the class
             */
            oClassInfo?: sap.ClassInfo<T, sap.sac.df.model.VariableGroup>,
            /**
             * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
             * used by this class
             */
            FNMetaImpl?: Function
          ): Function;
          /**
           * Returns a metadata object for class sap.sac.df.model.VariableGroup.
           *
           *
           * @returns Metadata object describing this class
           */
          static getMetadata(): sap.ui.base.Metadata;
          /**
           * Add variable group filters
           *
           *
           * @returns Reference to this in order to allow method chaining
           */
          addMemberFilter(
            /**
             * a member filter object
             */
            oMemberFilter: /* was: sap.sac.df.model.MemberFilter */ any
          ): this;
          /**
           * Add a member filter by its (internal) key
           *
           *
           * @returns Reference to this in order to allow method chaining
           */
          addMemberFilterByKey(
            /**
             * (internal) key of a dimension member
             */
            sKey: string
          ): this;
          /**
           * Clear variable group filter
           *
           *
           * @returns Reference to this in order to allow method chaining
           */
          clearMemberFilter(): this;
          /**
           * Get effective variable group filters
           *
           *
           * @returns array of member filters
           */
          getMemberFilter(): /* was: sap.sac.df.model.MemberFilter */ any[];
          /**
           * Opens the value help dialog so the user choose a value for a variable group After the value is selected
           * only teh VariableGroup.MergedVariable is updated. The variables of the aggregated DataProviders are updated
           * with the next ResultSet fetch
           *
           *
           * @returns to indicate if the VariableGroup has been updated
           */
          openValueHelpDialog(): Promise<boolean>;
          /**
           * Remove variable group filter
           *
           *
           * @returns Reference to this in order to allow method chaining
           */
          removeMemberFilter(
            /**
             * a member filter object
             */
            oMemberFilter: /* was: sap.sac.df.model.MemberFilter */ any
          ): this;
          /**
           * Remove a member filter by its (internal) key
           *
           *
           * @returns Reference to this in order to allow method chaining
           */
          removeMemberFilterByKey(
            /**
             * (internal) key of a dimension member
             */
            sKey: string
          ): this;
          /**
           * Set variable group filters
           *
           *
           * @returns Promise which resolve when the value is set
           */
          setMemberFilter(
            /**
             * array of member filters
             */
            aMemberFilter: /* was: sap.sac.df.model.MemberFilter */ any[]
          ): undefined;
          /**
           * Set a member filter by its (internal) key
           *
           *
           * @returns Reference to this in order to allow method chaining
           */
          setMemberFilterByKey(
            /**
             * (internal) ey of a dimension member
             */
            sKey: string
          ): this;
        }

        /**
         * Event object of the DataProvider#dataUpdated event.
         */
        type DataProvider$DataUpdatedEvent = sap.ui.base.Event<
          DataProvider$DataUpdatedEventParameters,
          DataProvider
        >;

        /**
         * Event object of the DataProvider#visualizationAdded event.
         */
        type DataProvider$VisualizationAddedEvent = sap.ui.base.Event<
          DataProvider$VisualizationAddedEventParameters,
          DataProvider
        >;

        /**
         * Event object of the DataProvider#visualizationRemoved event.
         */
        type DataProvider$VisualizationRemovedEvent = sap.ui.base.Event<
          DataProvider$VisualizationRemovedEventParameters,
          DataProvider
        >;

        /**
         * Event object of the MultiDimModel#dataLoaded event.
         */
        type MultiDimModel$DataLoadedEvent = sap.ui.base.Event<
          MultiDimModel$DataLoadedEventParameters,
          MultiDimModel
        >;

        /**
         * Event object of the MultiDimModel#dataProviderAdded event.
         */
        type MultiDimModel$DataProviderAddedEvent = sap.ui.base.Event<
          MultiDimModel$DataProviderAddedEventParameters,
          MultiDimModel
        >;

        /**
         * Event object of the MultiDimModel#dataProviderRemoved event.
         */
        type MultiDimModel$DataProviderRemovedEvent = sap.ui.base.Event<
          MultiDimModel$DataProviderRemovedEventParameters,
          MultiDimModel
        >;

        /**
         * Event object of the MultiDimModel#dataProviderUpdated event.
         */
        type MultiDimModel$DataProviderUpdatedEvent = sap.ui.base.Event<
          MultiDimModel$DataProviderUpdatedEventParameters,
          MultiDimModel
        >;

        /**
         * Event object of the MultiDimModel#loaded event.
         */
        type MultiDimModel$LoadedEvent = sap.ui.base.Event<
          MultiDimModel$LoadedEventParameters,
          MultiDimModel
        >;

        /**
         * Event object of the MultiDimModel#variableGroupsAdded event.
         */
        type MultiDimModel$VariableGroupsAddedEvent = sap.ui.base.Event<
          MultiDimModel$VariableGroupsAddedEventParameters,
          MultiDimModel
        >;
      }

      namespace types {
        namespace configuration {
          /**
           * Item of the styling panel
           *
           * @experimental As of version 1.132.
           */
          enum StylingPanelItem {
            /**
             * Conditional Formatting
             */
            ConditionalFormatting = "ConditionalFormatting",
            /**
             * Number Formatting
             */
            NumberFormatting = "NumberFormatting",
            /**
             * Table Properties
             */
            TableProperties = "TableProperties",
          }
          /**
           * Item of the styling panel
           *
           * @experimental As of version 1.135.
           */
          enum TableTemplate {
            /**
             * Basic
             */
            Basic = "Basic",
            /**
             * Default
             */
            Default = "Default",
            /**
             * Financial
             */
            Financial = "Financial",
            /**
             * Report
             */
            Report = "Report",
          }
        }

        /**
         * Axis of a multidimensional Result Set
         *
         * @experimental As of version 1.119.
         */
        enum Axis {
          /**
           * Columns axis (horizontal direction in a Grid)
           */
          Columns = "Columns",
          /**
           * Free axis (contains all dimensions that can be placed on the row/column axis)
           */
          Free = "Free",
          /**
           * Row axis (vertical direction in a Grid)
           */
          Rows = "Rows",
        }
        /**
         * DataAnalyzer Panels
         *
         * @experimental As of version 1.132.
         */
        enum DataAnalyzerPanelName {
          /**
           * Designer Panel
           */
          Designer = "OlapDesignerDocument",
          /**
           * Styling Panel
           */
          Styling = "StylingPanelDocument",
        }
        /**
         * Type of a data source
         *
         * @experimental As of version 1.89.
         */
        enum DataSourceType {
          /**
           * CDS Projection View
           */
          CDSProjectionView = "CDSProjectionView",
          /**
           * Cube
           */
          Cube = "Cube",
          /**
           * Ina Model
           */
          InAModel = "InAModel",
          /**
           * Insight (widget definition)
           */
          Insight = "Insight",
          /**
           * Query
           */
          Query = "Query",
          /**
           * View
           */
          View = "View",
        }
        /**
         * Documents support type
         *
         * @experimental As of version 1.120.
         */
        enum DocumentsSupportType {
          /**
           * Documents are not supported.
           */
          None = "NONE",
          /**
           * Read-only documents support.
           */
          Read = "READ",
          /**
           * Read, create, change documents support.
           */
          ReadCreateChange = "READ_CREATE_CHANGE",
          /**
           * Read, create, change, delete documents support.
           */
          ReadWrite = "READ_WRITE",
        }
        /**
         * Semantic Role of a dimension member
         *
         * @experimental As of version 1.135.
         */
        enum SemanticRole {
          /**
           * Absolute Variance
           */
          AbsoluteVariance = "AbsoluteVariance",
          /**
           * Actual Data
           */
          Actual = "Actual",
          /**
           * Budget Data
           */
          Budget = "Budget",
          /**
           * Forecast Data
           */
          Forecast = "Forecast",
          /**
           * Percentage Variance
           */
          PercentageVariance = "PercentageVariance",
          /**
           * Previous Data
           */
          Previous = "Previous",
        }
        /**
         * Sort Direction
         *
         * @experimental As of version 1.130.
         */
        enum SortDirection {
          /**
           * Ascending
           */
          Ascending = "ASCENDING",
          /**
           * Descending
           */
          Descending = "DESCENDING",
          /**
           * No sorting
           */
          None = "NONE",
        }
        /**
         * Sort Type
         *
         * @experimental As of version 1.130.
         */
        enum SortType {
          /**
           * Sort according to Filter
           */
          Filter = "FILTER",
          /**
           * Sort according to Key
           */
          MemberKey = "MEMBER_KEY",
          /**
           * Sort according to Text
           */
          MemberText = "MEMBER_TEXT",
          /**
           * No sorting
           */
          unset = "unset",
        }
        /**
         * System Type of an InA System
         *
         * @experimental As of version 1.89.
         */
        enum SystemType {
          /**
           * The ABAP analytic engine
           */
          ABAP_MDS = "ABAP_MDS",
          /**
           * The BW analytic engine
           */
          BW = "BW",
          /**
           * The Data Warehouce Cloud analytic engine
           */
          DWC = "DWC",
          /**
           * The HANA/MDS analytic engine
           */
          HANA = "HANA",
        }
      }
      /**
       * Describes the settings that can be provided to the DataAnalyzer constructor.
       *
       * @experimental As of version 1.132.
       */
      interface $DataAnalyzerSettings extends sap.ui.core.$ControlSettings {
        /**
         * Defines the relative path to the data provider in the multidimensional model.
         */
        metaPath?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Selected panel item
         */
        selectedPanel?:
          | sap.sac.df.types.DataAnalyzerPanelName
          | sap.ui.base.ManagedObject.PropertyBindingInfo
          | `{${string}}`;

        /**
         * Show visualization type
         */
        showVisualizationType?:
          | boolean
          | sap.ui.base.ManagedObject.PropertyBindingInfo
          | `{${string}}`;

        /**
         * Show / hide title
         */
        showTitle?:
          | boolean
          | sap.ui.base.ManagedObject.PropertyBindingInfo
          | `{${string}}`;

        /**
         * Title
         */
        title?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;
      }

      /**
       * Describes the settings that can be provided to the DesignerPanel constructor.
       *
       * @experimental As of version 1.129.
       */
      interface $DesignerPanelSettings extends sap.ui.core.$ControlSettings {
        /**
         * Defines the relative path to visualization of the corresponding data provider in the multidimensional
         * model.
         */
        metaPath?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Show visualization type
         */
        showVisualizationType?:
          | boolean
          | sap.ui.base.ManagedObject.PropertyBindingInfo
          | `{${string}}`;

        /**
         * Show available objects panel
         */
        showAvailableObjects?:
          | boolean
          | sap.ui.base.ManagedObject.PropertyBindingInfo
          | `{${string}}`;
      }

      /**
       * Describes the settings that can be provided to the FilterBar constructor.
       *
       * @experimental As of version 1.119.
       */
      interface $FilterBarSettings extends sap.ui.mdc.$FilterBarSettings {
        /**
         * Defines the relative path of the property in the metamodel, based on the current contextPath.
         */
        metaPath?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;
      }

      /**
       * Describes the settings that can be provided to the FilterField constructor.
       *
       * @experimental As of version 1.121.
       */
      interface $FilterFieldSettings extends sap.ui.mdc.$FilterFieldSettings {
        /**
         * Defines the relative path of the property in the metamodel, based on the current contextPath.
         */
        metaPath?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;
      }

      /**
       * Describes the settings that can be provided to the Grid constructor.
       *
       * @experimental As of version 1.129.
       */
      interface $GridSettings extends sap.ui.core.$ControlSettings {
        /**
         * Defines the relative path to the data provider in the multidimensional model.
         */
        metaPath?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Show / hide status bar
         */
        showStatusBar?:
          | boolean
          | sap.ui.base.ManagedObject.PropertyBindingInfo
          | `{${string}}`;

        /**
         * Show / hide title
         */
        showTitle?:
          | boolean
          | sap.ui.base.ManagedObject.PropertyBindingInfo
          | `{${string}}`;

        /**
         * Title
         */
        title?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Fires on cell click event
         */
        onCellClick?: (oEvent: Grid$OnCellClickEvent) => void;
      }

      /**
       * Describes the settings that can be provided to the StylingPanel constructor.
       *
       * @experimental As of version 1.129.
       */
      interface $StylingPanelSettings extends sap.ui.core.$ControlSettings {
        /**
         * Defines the relative path to the data provider in the multidimensional model.
         */
        metaPath?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;
      }

      /**
       * Parameters of the Grid#onCellClick event.
       */
      interface Grid$OnCellClickEventParameters {
        /**
         * Cell context
         */
        cellContext?: object;
      }

      /**
       * DataAnalyzer A control to display multi-dimensional data
       *
       * @experimental As of version 1.132.
       */
      class DataAnalyzer extends sap.ui.core.Control {
        /**
         * Constructor for a new `DataAnalyzer` control.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor();

        /**
         * Creates a new subclass of class sap.sac.df.DataAnalyzer with name `sClassName` and enriches it with the
         * information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
         *
         *
         * @returns Created class / constructor function
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.sac.df.DataAnalyzer>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Returns a metadata object for class sap.sac.df.DataAnalyzer.
         *
         *
         * @returns Metadata object describing this class
         */
        static getMetadata(): sap.ui.core.ElementMetadata;
        /**
         * Gets current value of property {@link #getMetaPath metaPath}.
         *
         * Defines the relative path to the data provider in the multidimensional model.
         *
         *
         * @returns Value of property `metaPath`
         */
        getMetaPath(): string;
        /**
         * Gets current value of property {@link #getSelectedPanel selectedPanel}.
         *
         * Selected panel item
         *
         *
         * @returns Value of property `selectedPanel`
         */
        getSelectedPanel(): sap.sac.df.types.DataAnalyzerPanelName;
        /**
         * Gets current value of property {@link #getShowTitle showTitle}.
         *
         * Show / hide title
         *
         * Default value is `false`.
         *
         *
         * @returns Value of property `showTitle`
         */
        getShowTitle(): boolean;
        /**
         * Gets current value of property {@link #getShowVisualizationType showVisualizationType}.
         *
         * Show visualization type
         *
         *
         * @returns Value of property `showVisualizationType`
         */
        getShowVisualizationType(): boolean;
        /**
         * Gets current value of property {@link #getTitle title}.
         *
         * Title
         *
         *
         * @returns Value of property `title`
         */
        getTitle(): string;
        /**
         * Sets a new value for property {@link #getMetaPath metaPath}.
         *
         * Defines the relative path to the data provider in the multidimensional model.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         *
         * @returns Reference to `this` in order to allow method chaining
         */
        setMetaPath(
          /**
           * New value for property `metaPath`
           */
          sMetaPath: string
        ): this;
        /**
         * Sets a new value for property {@link #getSelectedPanel selectedPanel}.
         *
         * Selected panel item
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         *
         * @returns Reference to `this` in order to allow method chaining
         */
        setSelectedPanel(
          /**
           * New value for property `selectedPanel`
           */
          sSelectedPanel: sap.sac.df.types.DataAnalyzerPanelName
        ): this;
        /**
         * Sets a new value for property {@link #getShowTitle showTitle}.
         *
         * Show / hide title
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `false`.
         *
         *
         * @returns Reference to `this` in order to allow method chaining
         */
        setShowTitle(
          /**
           * New value for property `showTitle`
           */
          bShowTitle?: boolean
        ): this;
        /**
         * Sets a new value for property {@link #getShowVisualizationType showVisualizationType}.
         *
         * Show visualization type
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         *
         * @returns Reference to `this` in order to allow method chaining
         */
        setShowVisualizationType(
          /**
           * New value for property `showVisualizationType`
           */
          bShowVisualizationType: boolean
        ): this;
        /**
         * Sets a new value for property {@link #getTitle title}.
         *
         * Title
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         *
         * @returns Reference to `this` in order to allow method chaining
         */
        setTitle(
          /**
           * New value for property `title`
           */
          sTitle: string
        ): this;
      }
      /**
       * DesignerPanel A panel control to design layouts / visualizations
       *
       * @experimental As of version 1.129.
       */
      class DesignerPanel extends sap.ui.core.Control {
        /**
         * Constructor for a new `MultiDimDesignerPanel` control.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor();

        /**
         * Creates a new subclass of class sap.sac.df.DesignerPanel with name `sClassName` and enriches it with
         * the information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
         *
         *
         * @returns Created class / constructor function
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.sac.df.DesignerPanel>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Returns a metadata object for class sap.sac.df.DesignerPanel.
         *
         *
         * @returns Metadata object describing this class
         */
        static getMetadata(): sap.ui.core.ElementMetadata;
        /**
         * Gets current value of property {@link #getMetaPath metaPath}.
         *
         * Defines the relative path to visualization of the corresponding data provider in the multidimensional
         * model.
         *
         *
         * @returns Value of property `metaPath`
         */
        getMetaPath(): string;
        /**
         * Gets current value of property {@link #getShowAvailableObjects showAvailableObjects}.
         *
         * Show available objects panel
         *
         * Default value is `true`.
         *
         *
         * @returns Value of property `showAvailableObjects`
         */
        getShowAvailableObjects(): boolean;
        /**
         * Gets current value of property {@link #getShowVisualizationType showVisualizationType}.
         *
         * Show visualization type
         *
         * Default value is `false`.
         *
         *
         * @returns Value of property `showVisualizationType`
         */
        getShowVisualizationType(): boolean;
        /**
         * Sets a new value for property {@link #getMetaPath metaPath}.
         *
         * Defines the relative path to visualization of the corresponding data provider in the multidimensional
         * model.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         *
         * @returns Reference to `this` in order to allow method chaining
         */
        setMetaPath(
          /**
           * New value for property `metaPath`
           */
          sMetaPath: string
        ): this;
        /**
         * Sets a new value for property {@link #getShowAvailableObjects showAvailableObjects}.
         *
         * Show available objects panel
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `true`.
         *
         *
         * @returns Reference to `this` in order to allow method chaining
         */
        setShowAvailableObjects(
          /**
           * New value for property `showAvailableObjects`
           */
          bShowAvailableObjects?: boolean
        ): this;
        /**
         * Sets a new value for property {@link #getShowVisualizationType showVisualizationType}.
         *
         * Show visualization type
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `false`.
         *
         *
         * @returns Reference to `this` in order to allow method chaining
         */
        setShowVisualizationType(
          /**
           * New value for property `showVisualizationType`
           */
          bShowVisualizationType?: boolean
        ): this;
      }
      /**
       * A Filter Bar based on Multidimensional Model
       *
       * @experimental As of version 1.119.
       */
      class FilterBar extends sap.ui.mdc.FilterBar {
        /**
         * Constructor for a new Filter Bar.
         */
        constructor();

        /**
         * Creates a new subclass of class sap.sac.df.FilterBar with name `sClassName` and enriches it with the
         * information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.mdc.FilterBar.extend}.
         *
         *
         * @returns Created class / constructor function
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.sac.df.FilterBar>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Returns a metadata object for class sap.sac.df.FilterBar.
         *
         *
         * @returns Metadata object describing this class
         */
        static getMetadata(): sap.ui.core.ElementMetadata;
        /**
         * Gets current value of property {@link #getMetaPath metaPath}.
         *
         * Defines the relative path of the property in the metamodel, based on the current contextPath.
         *
         *
         * @returns Value of property `metaPath`
         */
        getMetaPath(): string;
        /**
         * Sets a new value for property {@link #getMetaPath metaPath}.
         *
         * Defines the relative path of the property in the metamodel, based on the current contextPath.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         *
         * @returns Reference to `this` in order to allow method chaining
         */
        setMetaPath(
          /**
           * New value for property `metaPath`
           */
          sMetaPath: string
        ): this;
      }
      /**
       * The `FilterField` control is used to filter data based on the conditions. The conditions are managed
       * in the corresponding {@link sap.ui.mdc.condition.ConditionModel ConditionModel}.
       *
       * @experimental As of version 1.121.
       */
      class FilterField
        extends sap.ui.mdc.FilterField
        implements
          sap.ui.core.IFormContent,
          sap.ui.core.ISemanticFormContent,
          sap.m.IOverflowToolbarContent
      {
        __implements__sap_ui_core_IFormContent: boolean;
        __implements__sap_ui_core_ISemanticFormContent: boolean;
        __implements__sap_m_IOverflowToolbarContent: boolean;
        /**
         * Constructor for a new `FilterField`.
         */
        constructor(
          /**
           * Initial settings for the new control
           */
          mSettings?: sap.sac.df.$FilterFieldSettings
        );
        /**
         * Constructor for a new `FilterField`.
         */
        constructor(
          /**
           * ID for the new control, generated automatically if no ID is given
           */
          sId?: string,
          /**
           * Initial settings for the new control
           */
          mSettings?: sap.sac.df.$FilterFieldSettings
        );

        /**
         * Creates a new subclass of class sap.sac.df.FilterField with name `sClassName` and enriches it with the
         * information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.mdc.FilterField.extend}.
         *
         *
         * @returns Created class / constructor function
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.sac.df.FilterField>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Returns a metadata object for class sap.sac.df.FilterField.
         *
         *
         * @returns Metadata object describing this class
         */
        static getMetadata(): sap.ui.core.ElementMetadata;
        /**
         * Gets current value of property {@link #getMetaPath metaPath}.
         *
         * Defines the relative path of the property in the metamodel, based on the current contextPath.
         *
         *
         * @returns Value of property `metaPath`
         */
        getMetaPath(): string;
        /**
         * Sets a new value for property {@link #getMetaPath metaPath}.
         *
         * Defines the relative path of the property in the metamodel, based on the current contextPath.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         *
         * @returns Reference to `this` in order to allow method chaining
         */
        setMetaPath(
          /**
           * New value for property `metaPath`
           */
          sMetaPath: string
        ): this;
      }
      /**
       * A Filter Panel based on Multidimensional Model
       *
       * @experimental As of version 1.128.
       */
      class FilterPanel
        extends /* was: sap.ui.mdc.p13n.panels.FilterPanel */ Object
      {
        /**
         * Constructor for a new Filter Panel.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor();

        /**
         * Creates a new subclass of class sap.sac.df.FilterPanel with name `sClassName` and enriches it with the
         * information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.mdc.p13n.panels.FilterPanel.extend}.
         *
         *
         * @returns Created class / constructor function
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.sac.df.FilterPanel>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Returns a metadata object for class sap.sac.df.FilterPanel.
         *
         *
         * @returns Metadata object describing this class
         */
        static getMetadata(): sap.ui.base.Metadata;
        /**
         * Gets current value of property {@link #getEnableReorder enableReorder}.
         *
         * Determines whether the reordering of personalization items is enabled.
         *
         * Default value is `false`.
         *
         *
         * @returns Value of property `enableReorder`
         */
        getEnableReorder(): boolean;
        /**
         * Gets current value of property {@link #getMetaPath metaPath}.
         *
         * Defines the relative path of the property in the metamodel, based on the current contextPath.
         *
         *
         * @returns Value of property `metaPath`
         */
        getMetaPath(): string;
        /**
         * Sets a new value for property {@link #getEnableReorder enableReorder}.
         *
         * Determines whether the reordering of personalization items is enabled.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `false`.
         *
         *
         * @returns Reference to `this` in order to allow method chaining
         */
        setEnableReorder(
          /**
           * New value for property `enableReorder`
           */
          bEnableReorder?: boolean
        ): this;
        /**
         * Sets a new value for property {@link #getMetaPath metaPath}.
         *
         * Defines the relative path of the property in the metamodel, based on the current contextPath.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         *
         * @returns Reference to `this` in order to allow method chaining
         */
        setMetaPath(
          /**
           * New value for property `metaPath`
           */
          sMetaPath: string
        ): this;
      }
      /**
       * Grid A grid control for displaying multi-dimensional data
       *
       * @experimental As of version 1.129.
       */
      class Grid extends sap.ui.core.Control {
        /**
         * Constructor for a new `Grid` control.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor();

        /**
         * Creates a new subclass of class sap.sac.df.Grid with name `sClassName` and enriches it with the information
         * contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
         *
         *
         * @returns Created class / constructor function
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.sac.df.Grid>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Returns a metadata object for class sap.sac.df.Grid.
         *
         *
         * @returns Metadata object describing this class
         */
        static getMetadata(): sap.ui.core.ElementMetadata;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:onCellClick onCellClick} event of this `sap.sac.df.Grid`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.sac.df.Grid` itself.
         *
         * Fires on cell click event
         *
         *
         * @returns Reference to `this` in order to allow method chaining
         */
        attachOnCellClick(
          /**
           * An application-specific payload object that will be passed to the event handler along with the event
           * object when firing the event
           */
          oData: object,
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: Grid$OnCellClickEvent) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.sac.df.Grid` itself
           */
          oListener?: object
        ): this;
        /**
         * Attaches event handler `fnFunction` to the {@link #event:onCellClick onCellClick} event of this `sap.sac.df.Grid`.
         *
         * When called, the context of the event handler (its `this`) will be bound to `oListener` if specified,
         * otherwise it will be bound to this `sap.sac.df.Grid` itself.
         *
         * Fires on cell click event
         *
         *
         * @returns Reference to `this` in order to allow method chaining
         */
        attachOnCellClick(
          /**
           * The function to be called when the event occurs
           */
          fnFunction: (p1: Grid$OnCellClickEvent) => void,
          /**
           * Context object to call the event handler with. Defaults to this `sap.sac.df.Grid` itself
           */
          oListener?: object
        ): this;
        /**
         * Detaches event handler `fnFunction` from the {@link #event:onCellClick onCellClick} event of this `sap.sac.df.Grid`.
         *
         * The passed function and listener object must match the ones used for event registration.
         *
         *
         * @returns Reference to `this` in order to allow method chaining
         */
        detachOnCellClick(
          /**
           * The function to be called, when the event occurs
           */
          fnFunction: (p1: Grid$OnCellClickEvent) => void,
          /**
           * Context object on which the given function had to be called
           */
          oListener?: object
        ): this;
        /**
         * Fires event {@link #event:onCellClick onCellClick} to attached listeners.
         *
         * @ui5-protected Do not call from applications (only from related classes in the framework)
         *
         * @returns Reference to `this` in order to allow method chaining
         */
        fireOnCellClick(
          /**
           * Parameters to pass along with the event
           */
          mParameters?: sap.sac.df.Grid$OnCellClickEventParameters
        ): this;
        /**
         * Gets current value of property {@link #getMetaPath metaPath}.
         *
         * Defines the relative path to the data provider in the multidimensional model.
         *
         *
         * @returns Value of property `metaPath`
         */
        getMetaPath(): string;
        /**
         * Gets current value of property {@link #getShowStatusBar showStatusBar}.
         *
         * Show / hide status bar
         *
         * Default value is `false`.
         *
         *
         * @returns Value of property `showStatusBar`
         */
        getShowStatusBar(): boolean;
        /**
         * Gets current value of property {@link #getShowTitle showTitle}.
         *
         * Show / hide title
         *
         * Default value is `false`.
         *
         *
         * @returns Value of property `showTitle`
         */
        getShowTitle(): boolean;
        /**
         * Gets current value of property {@link #getTitle title}.
         *
         * Title
         *
         *
         * @returns Value of property `title`
         */
        getTitle(): string;
        /**
         * Sets a new value for property {@link #getMetaPath metaPath}.
         *
         * Defines the relative path to the data provider in the multidimensional model.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         *
         * @returns Reference to `this` in order to allow method chaining
         */
        setMetaPath(
          /**
           * New value for property `metaPath`
           */
          sMetaPath: string
        ): this;
        /**
         * Sets a new value for property {@link #getShowStatusBar showStatusBar}.
         *
         * Show / hide status bar
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `false`.
         *
         *
         * @returns Reference to `this` in order to allow method chaining
         */
        setShowStatusBar(
          /**
           * New value for property `showStatusBar`
           */
          bShowStatusBar?: boolean
        ): this;
        /**
         * Sets a new value for property {@link #getShowTitle showTitle}.
         *
         * Show / hide title
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         * Default value is `false`.
         *
         *
         * @returns Reference to `this` in order to allow method chaining
         */
        setShowTitle(
          /**
           * New value for property `showTitle`
           */
          bShowTitle?: boolean
        ): this;
        /**
         * Sets a new value for property {@link #getTitle title}.
         *
         * Title
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         *
         * @returns Reference to `this` in order to allow method chaining
         */
        setTitle(
          /**
           * New value for property `title`
           */
          sTitle: string
        ): this;
      }
      /**
       * StylingPanel A panel control to format the data being displayed.
       *
       * @experimental As of version 1.129.
       */
      class StylingPanel extends sap.ui.core.Control {
        /**
         * Constructor for a new `StylingPanel` control.
         *
         * Accepts an object literal `mSettings` that defines initial property values, aggregated and associated
         * objects as well as event handlers. See {@link sap.ui.base.ManagedObject#constructor} for a general description
         * of the syntax of the settings object.
         */
        constructor();

        /**
         * Creates a new subclass of class sap.sac.df.StylingPanel with name `sClassName` and enriches it with the
         * information contained in `oClassInfo`.
         *
         * `oClassInfo` might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
         *
         *
         * @returns Created class / constructor function
         */
        static extend<T extends Record<string, unknown>>(
          /**
           * Name of the class being created
           */
          sClassName: string,
          /**
           * Object literal with information about the class
           */
          oClassInfo?: sap.ClassInfo<T, sap.sac.df.StylingPanel>,
          /**
           * Constructor function for the metadata object; if not given, it defaults to the metadata implementation
           * used by this class
           */
          FNMetaImpl?: Function
        ): Function;
        /**
         * Returns a metadata object for class sap.sac.df.StylingPanel.
         *
         *
         * @returns Metadata object describing this class
         */
        static getMetadata(): sap.ui.core.ElementMetadata;
        /**
         * Gets current value of property {@link #getMetaPath metaPath}.
         *
         * Defines the relative path to the data provider in the multidimensional model.
         *
         *
         * @returns Value of property `metaPath`
         */
        getMetaPath(): string;
        /**
         * Sets a new value for property {@link #getMetaPath metaPath}.
         *
         * Defines the relative path to the data provider in the multidimensional model.
         *
         * When called with a value of `null` or `undefined`, the default value of the property will be restored.
         *
         *
         * @returns Reference to `this` in order to allow method chaining
         */
        setMetaPath(
          /**
           * New value for property `metaPath`
           */
          sMetaPath: string
        ): this;
      }

      /**
       * Event object of the Grid#onCellClick event.
       */
      type Grid$OnCellClickEvent = sap.ui.base.Event<
        Grid$OnCellClickEventParameters,
        Grid
      >;
    }
  }

  interface IUI5DefineDependencyNames {
    "sap/sac/df/changeHandler/MultiDimModelChangeHandler": undefined;

    "sap/sac/df/DataAnalyzer": undefined;

    "sap/sac/df/DesignerPanel": undefined;

    "sap/sac/df/FilterBar": undefined;

    "sap/sac/df/FilterField": undefined;

    "sap/sac/df/FilterPanel": undefined;

    "sap/sac/df/Grid": undefined;

    "sap/sac/df/library": undefined;

    "sap/sac/df/model/Configuration": undefined;

    "sap/sac/df/model/DataProvider": undefined;

    "sap/sac/df/model/DataSourceInfo": undefined;

    "sap/sac/df/model/Dimension": undefined;

    "sap/sac/df/model/Measure": undefined;

    "sap/sac/df/model/MultiDimModel": undefined;

    "sap/sac/df/model/Variable": undefined;

    "sap/sac/df/model/VariableGroup": undefined;

    "sap/sac/df/model/visualization/Documents": undefined;

    "sap/sac/df/model/visualization/Grid": undefined;

    "sap/sac/df/StylingPanel": undefined;

    "sap/sac/df/types/Axis": undefined;

    "sap/sac/df/types/configuration/StylingPanelItem": undefined;

    "sap/sac/df/types/configuration/TableTemplate": undefined;

    "sap/sac/df/types/DataAnalyzerPanelName": undefined;

    "sap/sac/df/types/DataSourceType": undefined;

    "sap/sac/df/types/DocumentsSupportType": undefined;

    "sap/sac/df/types/SemanticRole": undefined;

    "sap/sac/df/types/SortDirection": undefined;

    "sap/sac/df/types/SortType": undefined;

    "sap/sac/df/types/SystemType": undefined;
  }
}
