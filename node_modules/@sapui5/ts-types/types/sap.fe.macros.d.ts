// For Library Version: 1.140.0

declare namespace sap {
  namespace fe {
    /**
     * Library containing the building blocks for SAP Fiori elements.
     */
    namespace macros {
      namespace form {
        /**
         * Describes the settings that can be provided to the FormElement constructor.
         */
        interface $FormElementSettings
          extends sap.ui.layout.form.$FormElementSettings {
          /**
           * Defines the path of the context used in the current page or block.
           * This setting is defined by the framework.
           */
          contextPath?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Label shown for the field. If not set, the label from the annotations will be shown.
           */
          label?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Defines the relative path of the property in the metamodel, based on the current contextPath.
           */
          metaPath?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * If set to false, the FormElement is not rendered.
           */
          visible?:
            | boolean
            | sap.ui.base.ManagedObject.PropertyBindingInfo
            | `{${string}}`;

          /**
           * Optional aggregation of controls that should be displayed inside the FormElement.
           * If not set, a default Field building block will be rendered
           */
          fields?:
            | sap.ui.core.Control[]
            | sap.ui.core.Control
            | sap.ui.base.ManagedObject.AggregationBindingInfo
            | `{${string}}`;
        }

        /**
         * Building block used to create a form element based on the metadata provided by OData V4.
         *
         * @since 1.90.0
         */
        class FormElement extends sap.ui.layout.form.FormElement {}
      }

      namespace chart {
        /**
         * Describes the settings that can be provided to the Action constructor.
         */
        interface $ActionSettings
          extends sap.fe.macros.controls.$BuildingBlockObjectPropertySettings {
          /**
           * Reference to the key of another action already displayed in the toolbar to properly place this one
           */
          anchor?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Enables or disables the action
           */
          enabled?:
            | boolean
            | sap.ui.base.ManagedObject.PropertyBindingInfo
            | `{${string}}`;

          /**
           * Unique identifier of the action
           */
          key?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Defines where this action should be placed relative to the defined anchor
           * Allowed values are `Before` and `After`
           */
          placement?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Event handler to be called when the user chooses the action
           */
          press?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Defines if the action requires a selection.
           */
          requiresSelection?:
            | boolean
            | sap.ui.base.ManagedObject.PropertyBindingInfo
            | `{${string}}`;

          /**
           * The text that will be displayed for this action
           */
          text?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;
        }

        /**
         * Describes the settings that can be provided to the ActionGroup constructor.
         */
        interface $ActionGroupSettings
          extends sap.fe.macros.chart.$ActionSettings {
          /**
           * Reference to the key of another action or action group already displayed in the toolbar to properly place
           * this one
           */
          anchor?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Unique identifier of the action
           */
          key?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Defines where this action group should be placed relative to the defined anchor
           * Allowed values are `Before` and `After`
           */
          placement?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * The text that will be displayed for this action group
           */
          text?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Defines nested actions
           */
          actions?:
            | sap.fe.macros.chart.Action[]
            | sap.fe.macros.chart.Action
            | sap.ui.base.ManagedObject.AggregationBindingInfo
            | `{${string}}`;
        }

        /**
         * Describes the settings that can be provided to the Chart constructor.
         *
         * @deprecated As of version 1.130. Use {@link sap.fe.macros.Chart } instead
         * @experimental
         */
        interface $ChartSettings extends sap.ui.core.$ControlSettings {
          /**
           * Metadata path to the entitySet or navigationProperty
           */
          contextPath?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Id of the FilterBar building block associated with the chart.
           */
          filterBar?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Specifies the header text that is shown in the chart
           */
          header?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Controls if the header text should be shown or not
           */
          headerVisible?:
            | boolean
            | sap.ui.base.ManagedObject.PropertyBindingInfo
            | `{${string}}`;

          /**
           * Metadata path to the presentation context (UI.Chart with or without a qualifier)
           */
          metaPath?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Controls which options should be enabled for the chart personalization dialog.
           * If it is set to `true`, all possible options for this kind of chart are enabled.
           *
           * If it is set to `false`, personalization is disabled.
           *
           *
           *
           * You can also provide a more granular control for the personalization by providing a comma-separated list
           * with the options you want to be available.
           *
           * Available options are:
           *
           * - Sort
           *
           * - Type
           *
           * - Item
           *
           * - Filter
           */
          personalization?:
            | string
            | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Defines the selection mode to be used by the chart.
           * Allowed values are `None`, `Single` or `Multiple`
           */
          selectionMode?:
            | string
            | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Controls the kind of variant management that should be enabled for the chart.
           * Allowed value is `Control`.
           *
           * If set with value `Control`, a variant management control is seen within the chart and the chart is linked
           * to this.
           *
           * If not set with any value, variant management control is not available for this chart.
           */
          variantManagement?:
            | string
            | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Aggregate actions of the chart.
           */
          actions?:
            | Array<
                sap.fe.macros.chart.ActionGroup | sap.fe.macros.chart.Action
              >
            | sap.fe.macros.chart.ActionGroup
            | sap.fe.macros.chart.Action
            | sap.ui.base.ManagedObject.AggregationBindingInfo
            | `{${string}}`;
        }

        /**
         * Parameters of the Chart#selectionChange event.
         */
        interface Chart$SelectionChangeEventParameters {}

        /**
         * Definition of a custom action to be used in the chart toolbar
         */
        class Action extends sap.fe.macros.controls
          .BuildingBlockObjectProperty {}
        /**
         * Definition of a custom action group to be used inside the chart toolbar
         */
        class ActionGroup extends sap.fe.macros.chart.Action {}
        /**
         * Building block used to create a chart based on the metadata provided by OData V4.
         *
         *
         * Usually, a contextPath and metaPath is expected.
         * Usage example:
         *
         * ```javascript
         *
         * sap.ui.require(["sap/fe/macros/chart/Chart"], function(Chart) {
         * 	 ...
         * 	 new Chart("myChart", {metaPath:"MyChart"})
         * })
         * ```
         *
         * This is currently an experimental API because the structure of the generated content will change to come
         * closer to the Chart that you get out of templates.
         * The public method and property will not change but the internal structure will so be careful on your
         * usage.
         *
         *
         * @deprecated As of version 1.130. Use {@link sap.fe.macros.Chart } instead
         * @experimental
         */
        class Chart extends sap.ui.core.Control {
          /**
           * Gets current value of property contextPath.
           *
           *
           * @returns Value of property `contextPath`
           */
          getContextPath(): string;
          /**
           * Gets the key of the current variant in the associated variant management.
           *
           *
           * @returns Variant key of {@link sap.ui.fl.variants.VariantManagement } applied to the chart
           */
          getCurrentVariantKey(): null | string;
          /**
           * Gets current value of property filterBar.
           *
           *
           * @returns Value of property `filterBar`
           */
          getFilterBar(): string;
          /**
           * Gets current value of property header.
           *
           *
           * @returns Value of property `header`
           */
          getHeader(): string;
          /**
           * Gets current value of property headerVisible.
           *
           *
           * @returns Value of property `headerVisible`
           */
          getHeaderVisible(): boolean;
          /**
           * Gets current value of property metaPath.
           *
           *
           * @returns Value of property `metaPath`
           */
          getMetaPath(): string;
          /**
           * Gets current value of property personalization.
           *
           *
           * @returns Value of property `personalization`
           */
          getPersonalization(): string;
          /**
           * Get the presentation variant that is currently applied on the chart.
           *
           *
           * @returns The presentation variant {@link sap.fe.navigation.PresentationVariant } applied to the chart
           */
          getPresentationVariant(): Promise<sap.fe.navigation.PresentationVariant>;
          /**
           * Gets contexts from the chart that have been selected by the user.
           *
           *
           * @returns Contexts of the rows selected by the user
           */
          getSelectedContexts(): sap.ui.model.odata.v4.Context[];
          /**
           * Gets current value of property selectionMode.
           *
           *
           * @returns Value of property `selectionMode`
           */
          getSelectionMode(): string;
          /**
           * Get the selection variant from the chart. This function considers only the selection variant applied
           * at the control level.
           *
           *
           * @returns A promise that resolves with {@link sap.fe.navigation.SelectionVariant }.
           */
          getSelectionVariant(): Promise<sap.fe.navigation.SelectionVariant>;
          /**
           * Gets current value of property variantManagement.
           *
           *
           * @returns Value of property `variantManagement`
           */
          getVariantManagement(): string;
          /**
           * Gets current value of property contextPath.
           *
           *
           * @returns Value of property `contextPath`
           */
          setContextPath(): string;
          /**
           * Sets the variant of the provided key in the associated variant management.
           */
          setCurrentVariantKey(
            /**
             * The variant key of {@link sap.ui.fl.variants.VariantManagement } to be set
             */
            key: string
          ): void;
          /**
           * Gets current value of property filterBar.
           *
           *
           * @returns Value of property `filterBar`
           */
          setFilterBar(): string;
          /**
           * Gets current value of property header.
           *
           *
           * @returns Value of property `header`
           */
          setHeader(): string;
          /**
           * Gets current value of property headerVisible.
           *
           *
           * @returns Value of property `headerVisible`
           */
          setHeaderVisible(): boolean;
          /**
           * Gets current value of property metaPath.
           *
           *
           * @returns Value of property `metaPath`
           */
          setMetaPath(): string;
          /**
           * Gets current value of property personalization.
           *
           *
           * @returns Value of property `personalization`
           */
          setPersonalization(): string;
          /**
           * Set the presentation variant for the mdc chart.
           * The json format retrieved by using the get PresentationVariant button in the linked FPM sample should
           * be followed while trying to set the PresentationVariant as needed.
           * The values dimensions, measures and other properties should also be given in the valid format and null
           * or empty values should be avoided.
           * One dimension attribute should have only one role associated with it on a given chart.
           */
          setPresentationVariant(
            /**
             * the presentation variant {@link sap.fe.navigation.PresentationVariant } to be set
             */
            presentationVariant: sap.fe.navigation.PresentationVariant
          ): Promise<void>;
          /**
           * Gets current value of property selectionMode.
           *
           *
           * @returns Value of property `selectionMode`
           */
          setSelectionMode(): string;
          /**
           * Sets {@link sap.fe.navigation.SelectionVariant } to the chart. Note: setSelectionVariant will clear existing
           * filters and then apply the SelectionVariant values.
           *
           *
           * @returns A promise for asynchronous handling
           */
          setSelectionVariant(
            /**
             * The {@link sap.fe.navigation.SelectionVariant } to apply to the chart
             */
            selectionVariant: sap.fe.navigation.SelectionVariant,
            /**
             * Optional. If true, we will use the associated text property values (if they're available in the SelectionVariant)
             * to display the filter value descriptions, instead of loading them from the backend
             */
            prefillDescriptions?: boolean
          ): Promise<any>;
          /**
           * Gets current value of property variantManagement.
           *
           *
           * @returns Value of property `variantManagement`
           */
          setVariantManagement(): string;
        }

        /**
         * Event object of the Chart#selectionChange event.
         */
        type Chart$SelectionChangeEvent = sap.ui.base.Event<
          Chart$SelectionChangeEventParameters,
          Chart
        >;
      }

      namespace controls {
        namespace section {
          namespace ISingleSectionContributor {
            /**
             * Definition of data consumer by section from single control
             */
            type ConsumerData = {
              /**
               * Defines the title to be used by the single control.
               */
              title: string;
            };

            /**
             * Definition of data provided by section to single control
             */
            type ProviderData = {
              /**
               * Defines the title to be used by the section.
               */
              title: string;
            };
          }
          /**
           * This interface should be implemented by controls to define it's behaviour
           * when it is the only control in a Fiori Elements Object Page Section.
           *
           *
           *
           * The Fiori Elements Object Page Section checks if it has only one control at runtime and then
           * calls the relevant methods if the control implements the interface.
           *
           *
           *
           * Incase of a composite control or controls placed inside layouts (VBox, HBox, FlexBox) etc. it should
           * always be the root/layout control that implements this interface.
           * It is upto the root/layout contrl in this case of interact with inner controls.
           *
           *
           *
           * Control must implement getSectionContentRole to define whether it is a "provider" or a "consumer".
           *
           *
           *     - provider: Building block is the provider of information to the section
           *
           *     - consumer: Building block is the consumer of information provided by the section
           *
           *
           *
           * If the control is a "provider" then it should implement the getDataFromProvider method and return ProviderData.
           *
           *
           * If the control is a "consumer" then it should implement the sendDataToConsumer method and consume ConsumerData.
           *
           *
           *
           *
           * @since 1.126.0
           */
          interface ISingleSectionContributor {
            __implements__sap_fe_macros_controls_section_ISingleSectionContributor: boolean;

            /**
             * When the content role is "provider" this method is called by the section to get the information from
             * the the provider.
             *
             *
             * @returns The data from the provider which is needed by the section.
             */
            getDataFromProvider(): sap.fe.macros.controls.section.ISingleSectionContributor.ProviderData;
            /**
             * Defines the role of a control when it is the only content in the section. Allowed roles are "provider"
             * and "consumer".
             *
             *
             *
             * provider: control is the provider of information to the section. Control provides the information and
             * section acts on it.
             *
             *
             *
             * consumer: control is the consumer of information provided by the section. Section provides the information
             * and the control acts on it.
             *
             *
             *
             * @returns The role played by the control when it is the only content in the Fiori Elements Object Page
             * Section.
             */
            getSectionContentRole(): string;
            /**
             * When the content role is "consumer" this method is called by the section to collect
             * and send information from the section to the control.
             */
            sendDataToConsumer(
              /**
               * Data provide by the section to the control.
               */
              consumerData: sap.fe.macros.controls.section.ISingleSectionContributor.ConsumerData
            ): void;
          }
        }
        /**
         * Describes the settings that can be provided to the BuildingBlockObjectProperty constructor.
         */
        interface $BuildingBlockObjectPropertySettings
          extends sap.ui.core.$ElementSettings {}

        /**
         * Describes the settings that can be provided to the BuildingBlockWithTemplating constructor.
         *
         * @deprecated As of version 1.140.
         * @experimental
         */
        interface $BuildingBlockWithTemplatingSettings
          extends sap.fe.core.buildingBlocks.$BuildingBlockSettings {}

        /**
         * Base class for building block complex object properties that can be serialized to XML.
         */
        class BuildingBlockObjectProperty extends sap.ui.core.Element {}
        /**
         * Using this class you can define a building block that will manage and render a templating based building
         * block.
         * On change of the main properties you will be able to recreate the content.
         *
         * @deprecated As of version 1.140.
         * @experimental
         */
        class BuildingBlockWithTemplating extends sap.fe.core.buildingBlocks
          .BuildingBlock {}
      }

      namespace field {
        /**
         * Describes the settings that can be provided to the Field constructor.
         *
         * @deprecated As of version 1.135. Use {@link sap.fe.macros.Field } instead
         * @experimental
         */
        interface $FieldSettings extends sap.ui.core.$ControlSettings {
          /**
           * Defines the path of the context used in the current page or block.
           * This setting is defined by the framework.
           */
          contextPath?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * This is used to optionally provide an external description that comes from a different model than the
           * oData model.
           * This should be used in conjunction with the value property.
           */
          description?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Defines the relative path of the property in the metamodel, based on the current contextPath.
           */
          metaPath?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * An expression that allows you to control the read-only state of the field.
           * If you do not set any expression, SAP Fiori elements hooks into the standard lifecycle to determine the
           * current state.
           */
          readOnly?:
            | boolean
            | sap.ui.base.ManagedObject.PropertyBindingInfo
            | `{${string}}`;

          /**
           * Option to add semantic objects for a field.
           * This parameter overwrites the semantic objects defined through annotations.
           * Valid options are either a single semantic object, a stringified array of semantic objects,
           * a formatter or a single binding expression returning either a single semantic object or an array of semantic
           * objects.
           */
          semanticObject?:
            | string
            | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * This is used to optionally provide an external value that comes from a different model than the OData
           * model.
           * It is designed to work with a field with value help, and without support for complex value help (currency
           * / unit).
           */
          value?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * A set of options that can be configured.
           */
          formatOptions?: sap.fe.macros.field.FieldFormatOptions;
        }

        /**
         * Describes the settings that can be provided to the FieldFormatOptions constructor.
         */
        interface $FieldFormatOptionsSettings
          extends sap.fe.macros.controls.$BuildingBlockObjectPropertySettings {
          /**
           * Property for defining a custom pattern for the date, time, or dateTime format.
           *
           * If a dateTimePattern is defined, the dateTimeStyle is ignored.
           */
          dateTimePattern?:
            | string
            | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Property for defining the display style for the date, time, or dateTime format.
           *
           * If there is a dateTimePattern defined, dateTimeStyle is ignored.
           */
          dateTimeStyle?:
            | string
            | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Defines how the field value and associated text will be displayed together.
           *
           * Allowed values are "Value", "Description", "DescriptionValue" and "ValueDescription"
           */
          displayMode?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Determines how the field should be rendered, e.g. as radio buttons.
           *
           * If not all prerequisites are met, the field will default back to the standard rendering.
           */
          fieldEditStyle?:
            | string
            | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Defines if and how the field measure will be displayed.
           *
           * Allowed values are "Hidden" and "ReadOnly"
           */
          measureDisplayMode?:
            | string
            | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Specifies if radio buttons should be rendered in a horizontal layout.
           */
          radioButtonsHorizontalLayout?:
            | boolean
            | sap.ui.base.ManagedObject.PropertyBindingInfo
            | `{${string}}`;

          /**
           * When the Field is displayed as a clickable element, it defines the size of the reactive area of the clickable
           * element:
           * - ReactiveAreaMode.Inline - The link is displayed as part of a sentence.
           * - ReactiveAreaMode.Overlay - The link is displayed as an overlay on top of other interactive parts of
           *     the page.
           * Note: It is designed to make the clickable element easier to activate and helps meet the WCAG 2.2 Target
           * Size requirement. It is applicable only for the SAP Horizon themes. Note: The size of the reactive area
           * is sufficiently large to help users avoid accidentally selecting (clicking or tapping) unintended UI
           * elements. UI elements positioned over other parts of the page may need an invisible active touch area.
           * This ensures that no elements beneath are activated accidentally when the user tries to interact with
           * the overlay element.
           */
          reactiveAreaMode?:
            | string
            | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Defines if the date part of a date time with timezone field should be shown.
           *
           * The dateTimeOffset field must have a timezone annotation.
           * The default value is true.
           */
          showDate?:
            | boolean
            | sap.ui.base.ManagedObject.PropertyBindingInfo
            | `{${string}}`;

          /**
           * Defines if the time part of a date time with timezone field should be shown.
           *
           * The dateTimeOffset field must have a timezone annotation.
           * The default value is true.
           */
          showTime?:
            | boolean
            | sap.ui.base.ManagedObject.PropertyBindingInfo
            | `{${string}}`;

          /**
           * Defines if the timezone part of a date time with timezone field should be shown.
           *
           * The dateTimeOffset field must have a timezone annotation.
           * The default value is true.
           */
          showTimezone?:
            | boolean
            | sap.ui.base.ManagedObject.PropertyBindingInfo
            | `{${string}}`;

          /**
           * Defines how the full text will be displayed.
           *
           * Allowed values are "InPlace" and "Popover"
           */
          textExpandBehaviorDisplay?:
            | string
            | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Maximum number of lines for multiline texts in edit mode.
           */
          textLinesEdit?:
            | int
            | sap.ui.base.ManagedObject.PropertyBindingInfo
            | `{${string}}`;

          /**
           * Maximum number of characters from the beginning of the text field that are shown initially.
           */
          textMaxCharactersDisplay?:
            | int
            | sap.ui.base.ManagedObject.PropertyBindingInfo
            | `{${string}}`;

          /**
           * Defines the maximum number of characters for the multiline text value.
           *
           * If a multiline text exceeds the maximum number of allowed characters, the counter below the input field
           * displays the exact number.
           */
          textMaxLength?:
            | int
            | sap.ui.base.ManagedObject.PropertyBindingInfo
            | `{${string}}`;

          /**
           * Maximum number of lines that multiline texts in edit mode can grow to.
           */
          textMaxLines?:
            | int
            | sap.ui.base.ManagedObject.PropertyBindingInfo
            | `{${string}}`;
        }

        /**
         * Parameters of the Field#change event.
         */
        interface Field$ChangeEventParameters {}

        /**
         * Parameters of the Field#liveChange event.
         */
        interface Field$LiveChangeEventParameters {}

        /**
         * Building block for creating a field based on the metadata provided by OData V4.
         *
         *
         * Usually, a DataField or DataPoint annotation is expected, but the field can also be used to display a
         * property from the entity type.
         * When creating a Field building block, you must provide an ID to ensure everything works correctly.
         * Usage example:
         *
         * ```javascript
         *
         * sap.ui.require(["sap/fe/macros/field/Field"], function(Field) {
         * 	 ...
         * 	 new Field("MyField", {metaPath:"MyProperty"})
         * })
         * ```
         *
         * This is currently an experimental API because the structure of the generated content will change to come
         * closer to the Field that you get out of templates.
         * The public method and property will not change but the internal structure will so be careful on your
         * usage.
         *
         *
         * @deprecated As of version 1.135. Use {@link sap.fe.macros.Field } instead
         * @experimental
         */
        class Field extends sap.ui.core.Control {
          /**
           * Adds a message to the field.
           *
           *
           * @returns The id of the message
           */
          addMessage(
            /**
             * The parameters to create message
             */
            parameters: {
              /**
               * Message description
               */
              description?: string;
              /**
               * Message text
               */
              message?: string;
              /**
               * True if the message is persistent
               */
              persistent?: boolean;
              /**
               * Type of the message
               */
              type?: /* was: sap.ui.core.message.MessageType */ any;
            }
          ): string;
          /**
           * Gets the current enablement state of the field.
           *
           *
           * @returns Boolean value with the enablement state
           */
          getEnabled(): boolean;
          /**
           * Retrieves the current value of the field.
           *
           *
           * @returns The current value of the field
           */
          getValue(): boolean | float | string | undefined;
          /**
           * Removes a message from the field.
           */
          removeMessage(
            /**
             * The id of the message
             */
            id: string
          ): void;
          /**
           * Sets the current enablement state of the field.
           *
           *
           * @returns The current field reference
           */
          setEnabled(): sap.ui.core.Control;
          /**
           * Sets the current value of the field.
           *
           *
           * @returns The current field reference
           */
          setValue(): sap.ui.core.Control;
        }
        /**
         * Additional format options for the field.
         */
        class FieldFormatOptions extends sap.fe.macros.controls
          .BuildingBlockObjectProperty {}

        /**
         * Event object of the Field#change event.
         */
        type Field$ChangeEvent = sap.ui.base.Event<
          Field$ChangeEventParameters,
          Field
        >;

        /**
         * Event object of the Field#liveChange event.
         */
        type Field$LiveChangeEvent = sap.ui.base.Event<
          Field$LiveChangeEventParameters,
          Field
        >;
      }

      namespace filterBar {
        /**
         * Describes the settings that can be provided to the FilterBar constructor.
         *
         * @experimental
         */
        interface $FilterBarSettings
          extends sap.fe.macros.controls.$BuildingBlockWithTemplatingSettings {
          /**
           * Defines the path of the context used in the current page or block.
           * This setting is defined by the framework.
           */
          contextPath?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * If true, the search is triggered automatically when a filter value is changed.
           */
          liveMode?:
            | boolean
            | sap.ui.base.ManagedObject.PropertyBindingInfo
            | `{${string}}`;

          /**
           * Defines the relative path of the property in the metamodel, based on the current contextPath.
           */
          metaPath?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Handles the visibility of the 'Clear' button on the FilterBar.
           */
          showClearButton?:
            | boolean
            | sap.ui.base.ManagedObject.PropertyBindingInfo
            | `{${string}}`;

          /**
           * Displays possible errors during the search in a message box
           */
          showMessages?:
            | boolean
            | sap.ui.base.ManagedObject.PropertyBindingInfo
            | `{${string}}`;

          /**
           * Parameter which sets the visibility of the FilterBar building block
           */
          visible?:
            | boolean
            | sap.ui.base.ManagedObject.PropertyBindingInfo
            | `{${string}}`;

          /**
           * Aggregate filter fields of the FilterBar building block
           */
          filterFields?:
            | sap.fe.macros.filterBar.FilterField[]
            | sap.fe.macros.filterBar.FilterField
            | sap.ui.base.ManagedObject.AggregationBindingInfo
            | `{${string}}`;
        }

        /**
         * Describes the settings that can be provided to the FilterField constructor.
         */
        interface $FilterFieldSettings
          extends sap.fe.macros.controls.$BuildingBlockObjectPropertySettings {
          /**
           * Reference to the key of another filter already displayed in the table to properly place this one
           */
          anchor?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * The property name of the FilterField
           */
          key?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * The text that will be displayed for this FilterField
           */
          label?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Defines where this filter should be placed relative to the defined anchor
           * Allowed values are `Before` and `After`
           */
          placement?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Defines which property will be influenced by the FilterField.
           * This must be a valid property of the entity as this can be used for SAP Companion integration
           */
          property?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * If set, the FilterField will be marked as a mandatory field.
           */
          required?:
            | boolean
            | sap.ui.base.ManagedObject.PropertyBindingInfo
            | `{${string}}`;

          /**
           * This property is not required at filter field level. To achieve the desired behavior, specify the showMessages
           * property in the FilterBar building block.
           *
           * @deprecated As of version 1.135.
           */
          showMessages?:
            | boolean
            | sap.ui.base.ManagedObject.PropertyBindingInfo
            | `{${string}}`;
        }

        /**
         * Parameters of the FilterBar#afterClear event.
         */
        interface FilterBar$AfterClearEventParameters {}

        /**
         * Parameters of the FilterBar#filterChanged event.
         */
        interface FilterBar$FilterChangedEventParameters {}

        /**
         * Parameters of the FilterBar#search event.
         */
        interface FilterBar$SearchEventParameters {}

        /**
         * Usage example:
         *
         * ```javascript
         *
         * sap.ui.require(["sap/fe/macros/filterBar/FilterBar"], function(FilterBar) {
         * 	 ...
         * 	 new FilterBar("MyFilterBar", {metaPath:"@com.sap.vocabularies.UI.v1.SelectionFields"})
         * })
         * ```
         *
         * This is currently an experimental API because the structure of the generated content will change to come
         * closer to the FilterBar that you get out of templates.
         * The public method and property will not change but the internal structure will so be careful on your
         * usage.
         *
         *
         * @experimental
         */
        class FilterBar extends sap.fe.macros.controls
          .BuildingBlockWithTemplating {
          /**
           * Get the Active Filters Text Summary for the filter bar.
           *
           *
           * @returns Active filters summary as text
           */
          getActiveFiltersText(): string;
          /**
           * Gets the key of the current variant in the associated variant management.
           *
           *
           * @returns Key of the currently selected variant. In case the model is not yet set, `null` will be returned.
           */
          getCurrentVariantKey(): null | string;
          /**
           * Determines whether the field is enabled or disabled.
           *
           *
           * @returns Whether the filterField is enabled or disabled.
           */
          getFilterFieldEnabled(
            /**
             * Name of the field.
             */
            name: string
          ): boolean;
          /**
           * Gets the visibility of a filter field.
           *
           *
           * @returns A {@link Promise } that resolves to check whether the filter field is visible or not.
           */
          getFilterFieldVisible(
            /**
             * The path to the property as a condition path
             */
            conditionPath: string
          ): Promise<boolean>;
          /**
           * Provides all the filters that are currently active
           * along with the search expression.
           *
           *
           * @returns An array of active filters and the search expression.
           */
          getFilters(): object;
          /**
           * Get the selection variant from the filter bar.
           * Note: This method returns all the filter values that are set in the filter bar, including the text from
           * the search field (with $search as the property name). However, it doesn't return any filter field condition
           * that uses a custom operator.
           *
           *
           * @returns A promise which resolves with a {@link sap.fe.navigation.SelectionVariant }
           */
          getSelectionVariant(): Promise<sap.fe.navigation.SelectionVariant>;
          /**
           * Sets the new selected variant in the associated variant management.
           */
          setCurrentVariantKey(
            /**
             * Key of the variant that should be selected. If the passed key doesn't identify a variant, it will be
             * ignored.
             */
            key: string
          ): void;
          /**
           * Sets the enablement of the field.
           */
          setFilterFieldEnabled(
            /**
             * Name of the field that should be enabled or disabled.
             */
            name: string,
            /**
             * Whether the field should be enabled or disabled.
             */
            enabled: boolean
          ): void;
          /**
           * Shows or hides any filter field from the filter bar.
           * The property will not be hidden inside the adaptation dialog and may be re-added.
           *
           *
           * @returns A {@link Promise } resolving once the change in visibility was applied
           */
          setFilterFieldVisible(
            /**
             * The path to the property as a condition path
             */
            conditionPath: string,
            /**
             * Whether it should be shown or hidden
             */
            visible: boolean
          ): Promise<void>;
          /**
           * Set the filter values for the given property in the filter bar.
           * The filter values can be either a single value or an array of values.
           * Each filter value must be represented as a primitive value.
           *
           *
           * @returns A promise for asynchronous handling
           */
          setFilterValues(
            /**
             * The path to the property as a condition path
             */
            sConditionPath: string,
            /**
             * The operator to be used (optional) - if not set, the default operator (EQ) will be used
             */
            sOperator: string | undefined,
            /**
             * The values to be applied
             */
            vValues?:
              | boolean
              | boolean[]
              | number
              | number[]
              | string
              | string[]
              | undefined
          ): Promise<void>;
          /**
           * Sets {@link sap.fe.navigation.SelectionVariant } to the filter bar. Note: setSelectionVariant will clear
           * existing filters and then apply the SelectionVariant values.
           * Note: This method cannot set the search field text or any filter field condition that relies on a custom
           * operator.
           *
           *
           * @returns A promise for asynchronous handling
           */
          setSelectionVariant(
            /**
             * The {@link sap.fe.navigation.SelectionVariant } to apply to the filter bar
             */
            selectionVariant: sap.fe.navigation.SelectionVariant,
            /**
             * Optional. If true, we will use the associated text property values (if they're available in the selectionVariant)
             * to display the filter value descriptions, instead of loading them from the backend
             */
            prefillDescriptions?: boolean
          ): Promise<any>;
          /**
           * Triggers the API search on the filter bar.
           *
           *
           * @returns Returns a promise which resolves if filter go is triggered successfully; otherwise gets rejected.
           */
          triggerSearch(): Promise<object | undefined>;
        }
        /**
         * Definition of a custom filter to be used inside the FilterBar.
         * The template for the FilterField has to be provided as the default aggregation
         *
         * {@link demo:sap/fe/core/fpmExplorer/index.html#/buildingBlocks/filterBar/filterBarCustoms Overview of Building Blocks}
         */
        class FilterField extends sap.fe.macros.controls
          .BuildingBlockObjectProperty {}

        /**
         * Event object of the FilterBar#afterClear event.
         */
        type FilterBar$AfterClearEvent = sap.ui.base.Event<
          FilterBar$AfterClearEventParameters,
          FilterBar
        >;

        /**
         * Event object of the FilterBar#filterChanged event.
         */
        type FilterBar$FilterChangedEvent = sap.ui.base.Event<
          FilterBar$FilterChangedEventParameters,
          FilterBar
        >;

        /**
         * Event object of the FilterBar#search event.
         */
        type FilterBar$SearchEvent = sap.ui.base.Event<
          FilterBar$SearchEventParameters,
          FilterBar
        >;
      }

      namespace microchart {
        /**
         * Describes the settings that can be provided to the MicroChart constructor.
         *
         * @deprecated As of version 1.130. Use {@link sap.fe.macros.MicroChart } instead
         * @experimental
         */
        interface $MicroChartSettings
          extends sap.fe.macros.$MicroChartSettings {
          /**
           * context path to the MicroChart.
           */
          contextPath?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Show blank space in case there is no data in the chart
           */
          hideOnNoData?:
            | boolean
            | sap.ui.base.ManagedObject.PropertyBindingInfo
            | `{${string}}`;

          /**
           * Metadata path to the  MicroChart.
           */
          metaPath?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * To control the rendering of Title, Subtitle and Currency Labels. When the size is xs then we do
           * not see the inner labels of the MicroChart as well.
           */
          showOnlyChart?:
            | boolean
            | sap.ui.base.ManagedObject.PropertyBindingInfo
            | `{${string}}`;

          /**
           * Size of the MicroChart
           */
          size?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;
        }

        /**
         * Building block used to create a MicroChart based on the metadata provided by OData V4.
         *
         *
         * Usually, a contextPath and metaPath is expected.
         * Usage example:
         *
         * ```javascript
         *
         * sap.ui.require(["sap/fe/macros/microchart/MicroChart"], function(MicroChart) {
         * 	 ...
         * 	 new MicroChart("microChartID", {metaPath:"MyProperty"})
         * })
         * ```
         *
         * This is currently an experimental API because the structure of the generated content will change to come
         * closer to the MicroChart that you get out of templates.
         * The public method and property will not change but the internal structure will so be careful on your
         * usage.
         *
         *
         * @deprecated As of version 1.130. Use {@link sap.fe.macros.MicroChart } instead
         * @experimental
         */
        class MicroChart extends sap.fe.macros.MicroChart {
          /**
           * Gets current value of property contextPath.
           *
           *
           * @returns Value of property `contextPath`
           */
          getContextPath(): string;
          /**
           * Gets current value of property hideOnNoData.
           *
           *
           * @returns Value of property `hideOnNoData`
           */
          getHideOnNoData(): boolean;
          /**
           * Gets current value of property metaPath.
           *
           *
           * @returns Value of property `metaPath`
           */
          getMetaPath(): string;
          /**
           * Gets current value of property showOnlyChart.
           *
           *
           * @returns Value of property `showOnlyChart`
           */
          getShowOnlyChart(): boolean;
          /**
           * Gets current value of property size.
           *
           *
           * @returns Value of property `size`
           */
          getSize(): string;
          /**
           * Gets current value of property contextPath.
           *
           *
           * @returns Value of property `contextPath`
           */
          setContextPath(): string;
          /**
           * Gets current value of property hideOnNoData.
           *
           *
           * @returns Value of property `hideOnNoData`
           */
          setHideOnNoData(): boolean;
          /**
           * Gets current value of property metaPath.
           *
           *
           * @returns Value of property `metaPath`
           */
          setMetaPath(): string;
          /**
           * Gets current value of property showOnlyChart.
           *
           *
           * @returns Value of property `showOnlyChart`
           */
          setShowOnlyChart(): boolean;
          /**
           * Gets current value of property size.
           *
           *
           * @returns Value of property `size`
           */
          setSize(): string;
        }
      }

      namespace richtexteditor {
        /**
         * Describes the settings that can be provided to the ButtonGroup constructor.
         */
        interface $ButtonGroupSettings extends sap.ui.core.$ElementSettings {
          /**
           * The buttons to be displayed in the group.
           */
          buttons?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * The priority of the group in the custom toolbar.
           */
          customToolbarPriority?:
            | int
            | sap.ui.base.ManagedObject.PropertyBindingInfo
            | `{${string}}`;

          /**
           * The name of the group.
           */
          name?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * The priority of the group.
           */
          priority?:
            | int
            | sap.ui.base.ManagedObject.PropertyBindingInfo
            | `{${string}}`;

          /**
           * Row number in which the button should be
           */
          row?:
            | int
            | sap.ui.base.ManagedObject.PropertyBindingInfo
            | `{${string}}`;

          /**
           * Whether the group is visible.
           */
          visible?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;
        }

        /**
         * Describes the settings that can be provided to the Plugin constructor.
         */
        interface $PluginSettings extends sap.ui.core.$ElementSettings {
          /**
           * The plugin name.
           */
          name?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;
        }

        /**
         * Button configurations for the RichTextEditor.
         */
        class ButtonGroup extends sap.ui.core.Element {}
        /**
         * Represents a TinyMCE plugin.
         * Each object has to contain a property "name" which then contains the plugin name/ID.
         */
        class Plugin extends sap.ui.core.Element {}
      }

      namespace share {
        /**
         * Describes the settings that can be provided to the ShareOptions constructor.
         */
        interface $ShareOptionsSettings
          extends sap.fe.macros.controls.$BuildingBlockObjectPropertySettings {}

        /**
         * Share Options.
         */
        class ShareOptions extends sap.fe.macros.controls
          .BuildingBlockObjectProperty {}
      }

      namespace table {
        /**
         * Describes the settings that can be provided to the Action constructor.
         */
        interface $ActionSettings
          extends sap.fe.macros.controls.$BuildingBlockObjectPropertySettings {
          /**
           * Reference to the key of another action already displayed in the toolbar to properly place this one
           */
          anchor?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Determines the shortcut combination to trigger the action
           */
          command?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Enables or disables the action
           */
          enabled?:
            | boolean
            | sap.ui.base.ManagedObject.PropertyBindingInfo
            | `{${string}}`;

          /**
           * Determines whether the action requires selecting one item or multiple items.
           * Allowed values are `single` and `multi`
           */
          enableOnSelect?:
            | string
            | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Displays the AI Icon on the action button.
           */
          isAIOperation?:
            | boolean
            | sap.ui.base.ManagedObject.PropertyBindingInfo
            | `{${string}}`;

          /**
           * Unique identifier of the action
           */
          key?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Defines where this action should be placed relative to the defined anchor
           * Allowed values are `Before` and `After`
           */
          placement?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Defines if the action requires a selection.
           */
          requiresSelection?:
            | boolean
            | sap.ui.base.ManagedObject.PropertyBindingInfo
            | `{${string}}`;

          /**
           * The text that will be displayed for this action
           */
          text?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Determines whether the action is visible.
           */
          visible?:
            | boolean
            | sap.ui.base.ManagedObject.PropertyBindingInfo
            | `{${string}}`;
        }

        /**
         * Describes the settings that can be provided to the ActionGroup constructor.
         */
        interface $ActionGroupSettings
          extends sap.fe.macros.controls.$BuildingBlockObjectPropertySettings {
          /**
           * Reference to the key of another action or action group already displayed in the toolbar to properly place
           * this one
           */
          anchor?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Determines the default action to be executed on the action group.
           */
          defaultAction?:
            | string
            | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Unique identifier of the ActionGroup
           */
          key?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Determines where this action group should be placed relative to the defined anchor
           * Allowed values are `Before` and `After`
           */
          placement?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * The text that will be displayed for this action group
           */
          text?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Determines the nested actions
           */
          actions?:
            | Array<
                sap.fe.macros.table.ActionOverride | sap.fe.macros.table.Action
              >
            | sap.fe.macros.table.ActionOverride
            | sap.fe.macros.table.Action
            | sap.ui.base.ManagedObject.AggregationBindingInfo
            | `{${string}}`;
        }

        /**
         * Describes the settings that can be provided to the ActionGroupOverride constructor.
         */
        interface $ActionGroupOverrideSettings
          extends sap.fe.macros.controls.$BuildingBlockObjectPropertySettings {
          /**
           * Reference to the key of another action or action group already displayed in the toolbar to properly place
           * this one
           */
          anchor?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Unique identifier of the ActionGroup to overridden.
           */
          key?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Determines where this action group should be placed relative to the defined anchor
           * Allowed values are `Before` and `After`
           */
          placement?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Determines the nested actions
           */
          actions?:
            | Array<
                sap.fe.macros.table.ActionOverride | sap.fe.macros.table.Action
              >
            | sap.fe.macros.table.ActionOverride
            | sap.fe.macros.table.Action
            | sap.ui.base.ManagedObject.AggregationBindingInfo
            | `{${string}}`;
        }

        /**
         * Describes the settings that can be provided to the ActionOverride constructor.
         */
        interface $ActionOverrideSettings
          extends sap.fe.macros.controls.$BuildingBlockObjectPropertySettings {
          /**
           * Reference to the key of another action already displayed in the toolbar to properly place this one
           */
          anchor?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Determines the shortcut combination to trigger the action
           */
          command?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Determines the function to get the default values of the action.
           */
          defaultValuesFunction?:
            | string
            | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Determines if the auto scroll is enabled after executing the action.
           */
          enableAutoScroll?:
            | boolean
            | sap.ui.base.ManagedObject.PropertyBindingInfo
            | `{${string}}`;

          /**
           * Enables or disables the action
           */
          enabled?:
            | boolean
            | sap.ui.base.ManagedObject.PropertyBindingInfo
            | `{${string}}`;

          /**
           * Determines whether the action requires selecting one item or multiple items.
           * Allowed values are `single` and `multi`
           */
          enableOnSelect?:
            | string
            | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Displays the AI Icon on the action button.
           */
          isAIOperation?:
            | boolean
            | sap.ui.base.ManagedObject.PropertyBindingInfo
            | `{${string}}`;

          /**
           * Unique identifier of the action to overridden.
           */
          key?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Determines whether there is a navigation after executing the action.
           */
          navigateToInstance?:
            | boolean
            | sap.ui.base.ManagedObject.PropertyBindingInfo
            | `{${string}}`;

          /**
           * Defines where this action should be placed relative to the defined anchor
           * Allowed values are `Before` and `After`
           */
          placement?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Determines whether the action is visible.
           */
          visible?:
            | boolean
            | sap.ui.base.ManagedObject.PropertyBindingInfo
            | `{${string}}`;
        }

        /**
         * Describes the settings that can be provided to the AnalyticalConfiguration constructor.
         */
        interface $AnalyticalConfigurationSettings
          extends sap.fe.macros.controls.$BuildingBlockObjectPropertySettings {
          /**
           * True if leaf level rows shall display aggregated data
           */
          aggregationOnLeafLevel?:
            | boolean
            | sap.ui.base.ManagedObject.PropertyBindingInfo
            | `{${string}}`;
        }

        /**
         * Describes the settings that can be provided to the Column constructor.
         */
        interface $ColumnSettings
          extends sap.fe.macros.controls.$BuildingBlockObjectPropertySettings {
          /**
           * Reference to the key of another column already displayed in the table to properly place this one
           */
          anchor?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * The column availability
           * Allowed values are `Default`, `Adaptation`, `Hidden`
           */
          availability?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * The text that will be displayed for this column header
           */
          header?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Aligns the header as well as the content horizontally
           */
          horizontalAlign?:
            | string
            | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Defines the column importance.
           * You can define which columns should be automatically moved to the pop-in area based on their importance
           */
          importance?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Unique identifier of the column
           */
          key?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Determines where this column should be placed relative to the defined anchor
           * Allowed values are `Before` and `After`
           */
          placement?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Determines the properties displayed in the column
           * The properties allow to export, sort, group, copy, and paste in the column
           */
          properties?:
            | string[]
            | sap.ui.base.ManagedObject.PropertyBindingInfo
            | `{${string}}`;

          /**
           * Determines if the information in the column is required.
           */
          required?:
            | boolean
            | sap.ui.base.ManagedObject.PropertyBindingInfo
            | `{${string}}`;

          /**
           * Determines the text displayed for the column tooltip
           */
          tooltip?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Determines the column's width.
           * Allowed values are 'auto', 'value', and 'inherit', according to {@link sap.ui.core.CSSSize }
           */
          width?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Indicates if the column header should be a part of the width calculation.
           */
          widthIncludingColumnHeader?:
            | boolean
            | sap.ui.base.ManagedObject.PropertyBindingInfo
            | `{${string}}`;

          /**
           * Determines the export settings for the column.
           */
          exportSettings?: sap.fe.macros.table.ColumnExportSettings;
        }

        /**
         * Describes the settings that can be provided to the ColumnExportSettings constructor.
         */
        interface $ColumnExportSettingsSettings
          extends sap.fe.macros.controls.$BuildingBlockObjectPropertySettings {
          /**
           * Determines the properties of the column.
           */
          property?:
            | string[]
            | sap.ui.base.ManagedObject.PropertyBindingInfo
            | `{${string}}`;

          /**
           * Determines a formatting template that supports indexed placeholders within curly brackets.
           */
          template?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Determines the data type of the field
           */
          type?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Determines the width of the column in characters
           */
          width?:
            | number
            | sap.ui.base.ManagedObject.PropertyBindingInfo
            | `{${string}}`;

          /**
           * Determines if the content needs to be wrapped.
           */
          wrap?:
            | boolean
            | sap.ui.base.ManagedObject.PropertyBindingInfo
            | `{${string}}`;
        }

        /**
         * Describes the settings that can be provided to the ColumnOverride constructor.
         */
        interface $ColumnOverrideSettings
          extends sap.fe.macros.controls.$BuildingBlockObjectPropertySettings {
          /**
           * The column availability
           * Allowed values are `Default`, `Adaptation`, `Hidden``
           */
          availability?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Aligns the header as well as the content horizontally
           */
          horizontalAlign?:
            | string
            | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Defines the importance of the column.
           * You can define which columns should be automatically moved to the pop-in area based on their importance
           */
          importance?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Unique identifier of the column to overridden.
           */
          key?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Determines the column's width.
           * Allowed values are 'auto', 'value', and 'inherit', according to {@link sap.ui.core.CSSSize }
           */
          width?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Indicates if the column header should be a part of the width calculation.
           */
          widthIncludingColumnHeader?:
            | boolean
            | sap.ui.base.ManagedObject.PropertyBindingInfo
            | `{${string}}`;

          /**
           * Determines the export settings for the column.
           */
          exportSettings?: sap.fe.macros.table.ColumnExportSettings;
        }

        /**
         * Describes the settings that can be provided to the MassEdit constructor.
         */
        interface $MassEditSettings
          extends sap.fe.macros.controls.$BuildingBlockObjectPropertySettings {
          /**
           * Defines the list of fields that should be ignored in the mass edit dialog
           */
          ignoredFields?:
            | string[]
            | sap.ui.base.ManagedObject.PropertyBindingInfo
            | `{${string}}`;

          /**
           * Defines the mode of the operation grouping to save the new values
           * Allowed values are `ChangeSet` and `Isolated`
           */
          operationGroupingMode?:
            | string
            | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Defines the list of fields that should be visible in the mass edit dialog
           */
          visibleFields?:
            | string[]
            | sap.ui.base.ManagedObject.PropertyBindingInfo
            | `{${string}}`;

          /**
           * The custom form container that can be displayed at the top of the mass edit dialog
           */
          customContent?: sap.ui.layout.form.FormContainer;
        }

        /**
         * Describes the settings that can be provided to the QuickVariantSelection constructor.
         */
        interface $QuickVariantSelectionSettings
          extends sap.fe.macros.controls.$BuildingBlockObjectPropertySettings {
          /**
           * Defines the list of paths pointing to the selection variants that should be used as quick filters
           */
          paths?:
            | string[]
            | sap.ui.base.ManagedObject.PropertyBindingInfo
            | `{${string}}`;

          /**
           * Defines whether the counts should be displayed next to the text
           */
          showCounts?:
            | boolean
            | sap.ui.base.ManagedObject.PropertyBindingInfo
            | `{${string}}`;
        }

        /**
         * Describes the settings that can be provided to the Table constructor.
         *
         * @experimental As of version 1.124.0.
         */
        interface $TableSettings
          extends sap.fe.macros.controls.$BuildingBlockWithTemplatingSettings {
          /**
           * An expression that allows you to control the 'busy' state of the table.
           */
          busy?:
            | boolean
            | sap.ui.base.ManagedObject.PropertyBindingInfo
            | `{${string}}`;

          /**
           * Determines whether the table adapts to the condensed layout.
           */
          condensedTableLayout?:
            | boolean
            | sap.ui.base.ManagedObject.PropertyBindingInfo
            | `{${string}}`;

          /**
           * Defines the path of the context used in the current page or block.
           * This setting is defined by the framework.
           */
          contextPath?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * A set of options that can be configured.
           */
          creationMode?:
            | sap.fe.macros.table.TableCreationOptions
            | sap.ui.base.ManagedObject.PropertyBindingInfo
            | `{${string}}`;

          /**
           * Determines whether the number of fixed columns can be configured in the Column Settings dialog.
           * This property doesn't apply for responsive tables
           */
          disableColumnFreeze?:
            | boolean
            | sap.ui.base.ManagedObject.PropertyBindingInfo
            | `{${string}}`;

          /**
           * Controls if the copy functionality of the table is disabled or not.
           */
          disableCopyToClipboard?:
            | boolean
            | sap.ui.base.ManagedObject.PropertyBindingInfo
            | `{${string}}`;

          /**
           * Specifies if the column width is automatically calculated.
           */
          enableAutoColumnWidth?:
            | boolean
            | sap.ui.base.ManagedObject.PropertyBindingInfo
            | `{${string}}`;

          /**
           * Controls if the export functionality of the table is enabled or not.
           */
          enableExport?:
            | boolean
            | sap.ui.base.ManagedObject.PropertyBindingInfo
            | `{${string}}`;

          /**
           * Controls whether the table can be opened in fullscreen mode or not.
           */
          enableFullScreen?:
            | boolean
            | sap.ui.base.ManagedObject.PropertyBindingInfo
            | `{${string}}`;

          /**
           * Controls if the paste functionality of the table is enabled or not.
           */
          enablePaste?:
            | boolean
            | sap.ui.base.ManagedObject.PropertyBindingInfo
            | `{${string}}`;

          /**
           * Determine whether the data copied to the computed columns is sent to the back end.
           */
          enablePastingOfComputedProperties?:
            | boolean
            | sap.ui.base.ManagedObject.PropertyBindingInfo
            | `{${string}}`;

          /**
           * Determines whether the Clear All button is enabled by default.
           * To enable the Clear All button by default, you must set this property to false.
           */
          enableSelectAll?:
            | boolean
            | sap.ui.base.ManagedObject.PropertyBindingInfo
            | `{${string}}`;

          /**
           * Maximum allowed number of records to be exported in one request.
           */
          exportRequestSize?:
            | int
            | sap.ui.base.ManagedObject.PropertyBindingInfo
            | `{${string}}`;

          /**
           * ID of the FilterBar building block associated with the table.
           */
          filterBar?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Number of columns that are fixed on the left. Only columns which are not fixed can be scrolled horizontally.
           * This property is not relevant for responsive tables
           */
          frozenColumnCount?:
            | int
            | sap.ui.base.ManagedObject.PropertyBindingInfo
            | `{${string}}`;

          /**
           * Specifies the header text that is shown in the table.
           */
          header?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Controls if the header text should be shown or not.
           */
          headerVisible?:
            | boolean
            | sap.ui.base.ManagedObject.PropertyBindingInfo
            | `{${string}}`;

          /**
           * Comma-separated value of fields that must be ignored in the OData metadata by the Table building block.
           *
           * The table building block is not going to create built-in columns or offer table personalization for comma-separated
           * value of fields that are provided in the ignoredfields.
           *
           * Any column referencing an ignored field is to be removed.
           */
          ignoredFields?:
            | string
            | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Defines whether to display the search action.
           */
          isSearchable?:
            | boolean
            | sap.ui.base.ManagedObject.PropertyBindingInfo
            | `{${string}}`;

          /**
           * Defines the relative path to a LineItem, PresentationVariant or SelectionPresentationVariant in the metamodel,
           * based on the current contextPath.
           */
          metaPath?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Changes the size of the IllustratedMessage in the table, or removes it completely.
           * Allowed values are `illustratedMessage-Auto`, `illustratedMessage-Base`, `illustratedMessage-Dialog`,
           * `illustratedMessage-Dot`, `illustratedMessage-Scene`, `illustratedMessage-Spot` or `text`.
           */
          modeForNoDataMessage?:
            | string
            | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Controls which options should be enabled for the table personalization dialog.
           * If it is set to `true`, all possible options for this kind of table are enabled.
           *
           * If it is set to `false`, personalization is disabled.
           *
           *
           *
           * You can also provide a more granular control for the personalization by providing a comma-separated list
           * with the options you want to be available.
           *
           * Available options are:
           *
           * - Sort
           *
           * - Column
           *
           * - Filter
           *
           * - Group
           *
           *
           *
           * The Group option is only applicable to analytical tables and responsive tables.
           */
          personalization?:
            | string
            | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Defines the layout options of the table popins. Only applies to responsive tables.
           * Allowed values are `Block`, `GridLarge`, and `GridSmall`.
           *
           * - `Block`: Sets a block layout for rendering the table popins. The elements inside the popin container
           *     are rendered one below the other.
           *
           * - `GridLarge`: Sets a grid layout for rendering the table popins. The grid width for each table popin
           *     is comparatively larger than GridSmall, so this layout allows less content to be rendered in a single
           *     popin row.
           *
           * - `GridSmall`: Sets a grid layout for rendering the table popins. The grid width for each table popin
           *     is small, so this layout allows more content to be rendered in a single popin row.
           */
          popinLayout?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * An expression that allows you to control the 'read-only' state of the table.
           * If you do not set any expression, SAP Fiori elements hooks into the standard lifecycle to determine the
           * current state.
           */
          readOnly?:
            | boolean
            | sap.ui.base.ManagedObject.PropertyBindingInfo
            | `{${string}}`;

          /**
           * Number of rows to be displayed in the table. Does not apply to responsive tables.
           */
          rowCount?:
            | int
            | sap.ui.base.ManagedObject.PropertyBindingInfo
            | `{${string}}`;

          /**
           * Defines how the table handles the visible rows. Does not apply to Responsive tables.
           * Allowed values are `Auto`, `Fixed`, and `Interactive`.
           *
           * - If set to `Fixed`, the table always has as many rows as defined in the rowCount property.
           *
           * - If set to `Auto`, the number of rows is changed by the table automatically. It will then adjust its
           *     row count to the space it is allowed to cover (limited by the surrounding container) but it cannot have
           *     less than defined in the `rowCount` property.
           *
           * - If set to `Interactive` the table can have as many rows as defined in the rowCount property. This number
           *     of rows can be modified by dragging the resizer available in this mode.
           */
          rowCountMode?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Defines how many additional data records are requested from the back-end system when the user scrolls
           * vertically in the table.
           */
          scrollThreshold?:
            | int
            | sap.ui.base.ManagedObject.PropertyBindingInfo
            | `{${string}}`;

          /**
           * Defines the maximum number of rows that can be selected at once in the table.
           * This property does not apply to responsive tables.
           */
          selectionLimit?:
            | int
            | sap.ui.base.ManagedObject.PropertyBindingInfo
            | `{${string}}`;

          /**
           * Defines the selection mode to be used by the table.
           * Allowed values are `None`, `Single`, `ForceSingle`, `Multi`, `ForceMulti` or `Auto`.
           * If set to 'Single', 'Multi' or 'Auto', SAP Fiori elements hooks into the standard lifecycle to determine
           * the consistent selection mode.
           * If set to 'ForceSingle' or 'ForceMulti' your choice will be respected but this might not respect the
           * Fiori guidelines.
           */
          selectionMode?:
            | string
            | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Defines the number of records to be initially requested from the back end.
           */
          threshold?:
            | int
            | sap.ui.base.ManagedObject.PropertyBindingInfo
            | `{${string}}`;

          /**
           * Defines the type of table that will be used by the building block to render the data.
           * Allowed values are `GridTable`, `ResponsiveTable` and `AnalyticalTable`.
           */
          type?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Controls the kind of variant management that should be enabled for the table.
           * Allowed value is `Control`.
           *
           * If set with value `Control`, a variant management control is seen within the table and the table is linked
           * to this.
           *
           * If not set with any value, control level variant management is not available for this table.
           */
          variantManagement?:
            | string
            | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Indicates if the column header should be a part of the width calculation.
           */
          widthIncludingColumnHeader?:
            | boolean
            | sap.ui.base.ManagedObject.PropertyBindingInfo
            | `{${string}}`;

          /**
           * Aggregate actions of the table.
           */
          actions?:
            | Array<
                sap.fe.macros.table.ActionGroup | sap.fe.macros.table.Action
              >
            | sap.fe.macros.table.ActionGroup
            | sap.fe.macros.table.Action
            | sap.ui.base.ManagedObject.AggregationBindingInfo
            | `{${string}}`;

          /**
           * A set of options that can be configured to control the aggregation behavior
           */
          analyticalConfiguration?: sap.fe.macros.table.AnalyticalConfiguration;

          /**
           * Aggregate columns of the table.
           */
          columns?:
            | Array<
                sap.fe.macros.table.ColumnOverride | sap.fe.macros.table.Column
              >
            | sap.fe.macros.table.ColumnOverride
            | sap.fe.macros.table.Column
            | sap.ui.base.ManagedObject.AggregationBindingInfo
            | `{${string}}`;

          /**
           * Aggregate mass edit of the table.
           */
          massEdit?: sap.fe.macros.table.MassEdit;

          /**
           * Aggregation to forward the IllustratedMessage control to the mdc control.
           */
          noData?:
            | sap.m.Text
            | sap.m.IllustratedMessage
            | sap.ui.base.ManagedObject.PropertyBindingInfo
            | `{${string}}`;

          /**
           * Aggregate quickVariantSelection of the table.
           */
          quickVariantSelection?: sap.fe.macros.table.QuickVariantSelection;
        }

        /**
         * Describes the settings that can be provided to the TableCreationOptions constructor.
         */
        interface $TableCreationOptionsSettings
          extends sap.fe.macros.controls.$BuildingBlockObjectPropertySettings {
          /**
           * Specifies if the new entry should be created at the top or bottom of a table in case of creationMode
           * 'Inline'
           *
           * The default value is 'false'
           */
          createAtEnd?:
            | boolean
            | sap.ui.base.ManagedObject.PropertyBindingInfo
            | `{${string}}`;

          /**
           * Defines the list of properties that will be displayed in the creation dialog, when the creation mode
           * is set to 'CreationDialog'.
           *
           * The value is a comma-separated list of property names.
           */
          creationFields?:
            | string
            | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Specifies if the new entry should be hidden in case of creationMode 'InlineCreationRows'. This only applies
           * to responsive tables.
           *
           * The default value is 'false'
           */
          inlineCreationRowsHiddenInEditMode?:
            | boolean
            | sap.ui.base.ManagedObject.PropertyBindingInfo
            | `{${string}}`;

          /**
           * Defines the creation mode to be used by the table.
           * Allowed values are `NewPage`, `Inline`, `InlineCreationsRows`, `External` or `CreationDialog`.
           *
           *
           *
           * NewPage - the created document is shown in a new page, depending on whether metadata 'Sync', 'Async'
           * or 'Deferred' is used
           *
           * Inline - The creation is done inline
           *
           * InlineCreationsRows - The creation is done inline with an empty row
           *
           * External - The creation is done in a different application specified via the parameter 'outbound'
           * CreationDialog - the creation is done in the table, with a dialog allowing to specify some initial property
           * values (the properties are listed in `creationFields`).
           *
           * If not set with any value:
           *
           * if navigation is defined, the default value is 'NewPage'. Otherwise it is 'Inline'.
           */
          name?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * The navigation target where the document is created in case of creationMode 'External'
           */
          outbound?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;
        }

        /**
         * Describes the settings that can be provided to the TreeTable constructor.
         *
         * @experimental As of version 1.125.0.
         */
        interface $TreeTableSettings
          extends sap.fe.macros.controls.$BuildingBlockWithTemplatingSettings {
          /**
           * An expression that allows you to control the 'busy' state of the table.
           */
          busy?:
            | boolean
            | sap.ui.base.ManagedObject.PropertyBindingInfo
            | `{${string}}`;

          /**
           * Determines whether the table adapts to the condensed layout.
           */
          condensedTableLayout?:
            | boolean
            | sap.ui.base.ManagedObject.PropertyBindingInfo
            | `{${string}}`;

          /**
           * Defines the path of the context used in the current page or block.
           * This setting is defined by the framework.
           */
          contextPath?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * A set of options that can be configured.
           */
          creationMode?:
            | sap.fe.macros.table.TreeTableCreationOptions
            | sap.ui.base.ManagedObject.PropertyBindingInfo
            | `{${string}}`;

          /**
           * Determines whether the number of fixed columns can be configured in the Column Settings dialog.
           * This property doesn't apply for responsive tables
           */
          disableColumnFreeze?:
            | boolean
            | sap.ui.base.ManagedObject.PropertyBindingInfo
            | `{${string}}`;

          /**
           * Controls if the copy functionality of the table is disabled or not.
           */
          disableCopyToClipboard?:
            | boolean
            | sap.ui.base.ManagedObject.PropertyBindingInfo
            | `{${string}}`;

          /**
           * Specifies if the column width is automatically calculated.
           */
          enableAutoColumnWidth?:
            | boolean
            | sap.ui.base.ManagedObject.PropertyBindingInfo
            | `{${string}}`;

          /**
           * Controls if the export functionality of the table is enabled or not.
           */
          enableExport?:
            | boolean
            | sap.ui.base.ManagedObject.PropertyBindingInfo
            | `{${string}}`;

          /**
           * Controls whether the table can be opened in fullscreen mode or not.
           */
          enableFullScreen?:
            | boolean
            | sap.ui.base.ManagedObject.PropertyBindingInfo
            | `{${string}}`;

          /**
           * Controls if the paste functionality of the table is enabled or not.
           */
          enablePaste?:
            | boolean
            | sap.ui.base.ManagedObject.PropertyBindingInfo
            | `{${string}}`;

          /**
           * Determine whether the data copied to the computed columns is sent to the back end.
           */
          enablePastingOfComputedProperties?:
            | boolean
            | sap.ui.base.ManagedObject.PropertyBindingInfo
            | `{${string}}`;

          /**
           * Determines whether the Clear All button is enabled by default.
           * To enable the Clear All button by default, you must set this property to false.
           */
          enableSelectAll?:
            | boolean
            | sap.ui.base.ManagedObject.PropertyBindingInfo
            | `{${string}}`;

          /**
           * Maximum allowed number of records to be exported in one request.
           */
          exportRequestSize?:
            | int
            | sap.ui.base.ManagedObject.PropertyBindingInfo
            | `{${string}}`;

          /**
           * ID of the FilterBar building block associated with the table.
           */
          filterBar?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Number of columns that are fixed on the left. Only columns which are not fixed can be scrolled horizontally.
           * This property is not relevant for responsive tables
           */
          frozenColumnCount?:
            | int
            | sap.ui.base.ManagedObject.PropertyBindingInfo
            | `{${string}}`;

          /**
           * Specifies the header text that is shown in the table.
           */
          header?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Controls if the header text should be shown or not.
           */
          headerVisible?:
            | boolean
            | sap.ui.base.ManagedObject.PropertyBindingInfo
            | `{${string}}`;

          /**
           * A set of options that can be configured.
           */
          hierarchyQualifier?:
            | string
            | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Comma-separated value of fields that must be ignored in the OData metadata by the Table building block.
           *
           * The table building block is not going to create built-in columns or offer table personalization for comma-separated
           * value of fields that are provided in the ignoredfields.
           *
           * Any column referencing an ignored field is to be removed.
           */
          ignoredFields?:
            | string
            | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Defines the extension point to control whether a source node can be copied to a specific parent node.
           */
          isCopyToPositionAllowed?:
            | string
            | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Defines the extension point to control whether a source node can be dropped on a specific parent node.
           */
          isMoveToPositionAllowed?:
            | string
            | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * efines the extension point to control whether a node can be copied.
           */
          isNodeCopyable?:
            | string
            | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Defines the extension point to control if a node can be dragged.
           */
          isNodeMovable?:
            | string
            | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Defines whether to display the search action.
           */
          isSearchable?:
            | boolean
            | sap.ui.base.ManagedObject.PropertyBindingInfo
            | `{${string}}`;

          /**
           * Defines the relative path to a LineItem, PresentationVariant or SelectionPresentationVariant in the metamodel,
           * based on the current contextPath.
           */
          metaPath?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Changes the size of the IllustratedMessage in the table, or removes it completely.
           * Allowed values are `illustratedMessage-Auto`, `illustratedMessage-Base`, `illustratedMessage-Dialog`,
           * `illustratedMessage-Dot`, `illustratedMessage-Scene`, `illustratedMessage-Spot` or `text`.
           */
          modeForNoDataMessage?:
            | string
            | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Controls which options should be enabled for the table personalization dialog.
           * If it is set to `true`, all possible options for this kind of table are enabled.
           *
           * If it is set to `false`, personalization is disabled.
           *
           *
           *
           * You can also provide a more granular control for the personalization by providing a comma-separated list
           * with the options you want to be available.
           *
           * Available options are:
           *
           * - Sort
           *
           * - Column
           *
           * - Filter
           *
           * - Group
           *
           *
           *
           * The Group option is only applicable to analytical tables and responsive tables.
           */
          personalization?:
            | string
            | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Defines the layout options of the table popins. Only applies to responsive tables.
           * Allowed values are `Block`, `GridLarge`, and `GridSmall`.
           *
           * - `Block`: Sets a block layout for rendering the table popins. The elements inside the popin container
           *     are rendered one below the other.
           *
           * - `GridLarge`: Sets a grid layout for rendering the table popins. The grid width for each table popin
           *     is comparatively larger than GridSmall, so this layout allows less content to be rendered in a single
           *     popin row.
           *
           * - `GridSmall`: Sets a grid layout for rendering the table popins. The grid width for each table popin
           *     is small, so this layout allows more content to be rendered in a single popin row.
           */
          popinLayout?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * An expression that allows you to control the 'read-only' state of the table.
           * If you do not set any expression, SAP Fiori elements hooks into the standard lifecycle to determine the
           * current state.
           */
          readOnly?:
            | boolean
            | sap.ui.base.ManagedObject.PropertyBindingInfo
            | `{${string}}`;

          /**
           * Number of rows to be displayed in the table. Does not apply to responsive tables.
           */
          rowCount?:
            | int
            | sap.ui.base.ManagedObject.PropertyBindingInfo
            | `{${string}}`;

          /**
           * Defines how the table handles the visible rows. Does not apply to Responsive tables.
           * Allowed values are `Auto`, `Fixed`, and `Interactive`.
           *
           * - If set to `Fixed`, the table always has as many rows as defined in the rowCount property.
           *
           * - If set to `Auto`, the number of rows is changed by the table automatically. It will then adjust its
           *     row count to the space it is allowed to cover (limited by the surrounding container) but it cannot have
           *     less than defined in the `rowCount` property.
           *
           * - If set to `Interactive` the table can have as many rows as defined in the rowCount property. This number
           *     of rows can be modified by dragging the resizer available in this mode.
           */
          rowCountMode?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Defines how many additional data records are requested from the back-end system when the user scrolls
           * vertically in the table.
           */
          scrollThreshold?:
            | int
            | sap.ui.base.ManagedObject.PropertyBindingInfo
            | `{${string}}`;

          /**
           * Defines the maximum number of rows that can be selected at once in the table.
           * This property does not apply to responsive tables.
           */
          selectionLimit?:
            | int
            | sap.ui.base.ManagedObject.PropertyBindingInfo
            | `{${string}}`;

          /**
           * Defines the selection mode to be used by the table.
           * Allowed values are `None`, `Single`, `ForceSingle`, `Multi`, `ForceMulti` or `Auto`.
           * If set to 'Single', 'Multi' or 'Auto', SAP Fiori elements hooks into the standard lifecycle to determine
           * the consistent selection mode.
           * If set to 'ForceSingle' or 'ForceMulti' your choice will be respected but this might not respect the
           * Fiori guidelines.
           */
          selectionMode?:
            | string
            | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Defines the number of records to be initially requested from the back end.
           */
          threshold?:
            | int
            | sap.ui.base.ManagedObject.PropertyBindingInfo
            | `{${string}}`;

          /**
           * Defines the type of table that will be used by the building block to render the data. This setting is
           * defined by the framework.
           * Allowed value is `TreeTable`.
           */
          type?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Controls the kind of variant management that should be enabled for the table.
           * Allowed value is `Control`.
           *
           * If set with value `Control`, a variant management control is seen within the table and the table is linked
           * to this.
           *
           * If not set with any value, control level variant management is not available for this table.
           */
          variantManagement?:
            | string
            | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Indicates if the column header should be a part of the width calculation.
           */
          widthIncludingColumnHeader?:
            | boolean
            | sap.ui.base.ManagedObject.PropertyBindingInfo
            | `{${string}}`;

          /**
           * Aggregate actions of the table.
           */
          actions?:
            | Array<
                sap.fe.macros.table.ActionGroup | sap.fe.macros.table.Action
              >
            | sap.fe.macros.table.ActionGroup
            | sap.fe.macros.table.Action
            | sap.ui.base.ManagedObject.AggregationBindingInfo
            | `{${string}}`;

          /**
           * A set of options that can be configured to control the aggregation behavior
           */
          analyticalConfiguration?: sap.fe.macros.table.AnalyticalConfiguration;

          /**
           * Aggregate columns of the table.
           */
          columns?:
            | Array<
                sap.fe.macros.table.ColumnOverride | sap.fe.macros.table.Column
              >
            | sap.fe.macros.table.ColumnOverride
            | sap.fe.macros.table.Column
            | sap.ui.base.ManagedObject.AggregationBindingInfo
            | `{${string}}`;

          /**
           * Aggregate mass edit of the table.
           */
          massEdit?: sap.fe.macros.table.MassEdit;

          /**
           * Aggregation to forward the IllustratedMessage control to the mdc control.
           */
          noData?:
            | sap.m.Text
            | sap.m.IllustratedMessage
            | sap.ui.base.ManagedObject.PropertyBindingInfo
            | `{${string}}`;

          /**
           * Aggregate quickVariantSelection of the table.
           */
          quickVariantSelection?: sap.fe.macros.table.QuickVariantSelection;
        }

        /**
         * Describes the settings that can be provided to the TreeTableCreationOptions constructor.
         */
        interface $TreeTableCreationOptionsSettings
          extends sap.fe.macros.controls.$BuildingBlockObjectPropertySettings {
          /**
           * Specifies if the new entry should be placed at the position computed by the backend (e.g. taking sorting
           * into account).
           *
           * The default value is 'false' (that is, the new entry is placed as the first child below its parent).
           */
          createInPlace?:
            | boolean
            | sap.ui.base.ManagedObject.PropertyBindingInfo
            | `{${string}}`;

          /**
           * Defines the list of properties that will be displayed in the creation dialog, when the creation mode
           * is set to 'CreationDialog'.
           *
           * The value is a comma-separated list of property names.
           */
          creationFields?:
            | string
            | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Defines the extension point to control the enablement of the Create button or Create Menu buttons.
           */
          isCreateEnabled?:
            | string
            | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Defines the creation mode to be used by the tree table.
           * Allowed values are `NewPage`, `Inline` or `CreationDialog`.
           *
           *
           *
           * NewPage - the created document is shown in a new page, depending on whether metadata 'Sync', 'Async'
           * or 'Deferred' is used.
           *
           * Inline - the creation is done inline.
           *
           * CreationDialog - the creation is done in the table, with a dialog allowing to specify some initial property
           * values (the properties are listed in `creationFields`).
           *
           * If not set with any value:
           *
           * if navigation is defined, the default value is 'NewPage'. Otherwise it is 'Inline'.
           */
          name?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

          /**
           * Defines the nodes to be added on the custom create.
           * This object must have the following properties:
           * propertyName: the name of the property on the page entity set used to categorize the node type to be
           * created within the hierarchy
           *
           * values: an array of key, label and an optional creationFields that define a value of the property defined
           * by the propertyName key, its label, and the specific fields to be shown in the creation dialog.
           */
          nodeType?:
            | object
            | sap.ui.base.ManagedObject.PropertyBindingInfo
            | `{${string}}`;
        }

        /**
         * Parameters of the Action#press event.
         */
        interface Action$PressEventParameters {}

        /**
         * Parameters of the Table#beforeRebindTable event.
         */
        interface Table$BeforeRebindTableEventParameters {}

        /**
         * Parameters of the Table#rowPress event.
         */
        interface Table$RowPressEventParameters {}

        /**
         * Parameters of the Table#selectionChange event.
         */
        interface Table$SelectionChangeEventParameters {}

        /**
         * Parameters of the TreeTable#beforeRebindTable event.
         */
        interface TreeTable$BeforeRebindTableEventParameters {}

        /**
         * Parameters of the TreeTable#rowPress event.
         */
        interface TreeTable$RowPressEventParameters {}

        /**
         * Parameters of the TreeTable#selectionChange event.
         */
        interface TreeTable$SelectionChangeEventParameters {}

        /**
         * Definition of a custom action to be used inside the table toolbar
         */
        class Action extends sap.fe.macros.controls
          .BuildingBlockObjectProperty {}
        /**
         * Definition of a custom ActionGroup to be used inside the table toolbar
         */
        class ActionGroup extends sap.fe.macros.controls
          .BuildingBlockObjectProperty {}
        /**
         * Definition of an action group override to be used inside the Table building block.
         */
        class ActionGroupOverride extends sap.fe.macros.controls
          .BuildingBlockObjectProperty {}
        /**
         * Definition of an override for the action to be used inside the Table building block.
         */
        class ActionOverride extends sap.fe.macros.controls
          .BuildingBlockObjectProperty {}
        /**
         * A set of options that can be configured to control the aggregation behavior
         */
        class AnalyticalConfiguration extends sap.fe.macros.controls
          .BuildingBlockObjectProperty {}
        /**
         * Definition of a custom column to be used inside the table.
         * The template for the column has to be provided as the default aggregation
         */
        class Column extends sap.fe.macros.controls
          .BuildingBlockObjectProperty {}
        /**
         * Definition of the export settings applied to a column within the table.
         */
        class ColumnExportSettings extends sap.fe.macros.controls
          .BuildingBlockObjectProperty {}
        /**
         * Definition of an override for the column to be used inside the Table building block.
         */
        class ColumnOverride extends sap.fe.macros.controls
          .BuildingBlockObjectProperty {}
        /**
         * Definition of the mass edit to be used inside the table.
         */
        class MassEdit extends sap.fe.macros.controls
          .BuildingBlockObjectProperty {}
        /**
         * Definition of the quickVariantSelection to be used inside the table.
         */
        class QuickVariantSelection extends sap.fe.macros.controls
          .BuildingBlockObjectProperty {}
        /**
         * Building block used to create a table based on the metadata provided by OData V4.
         *
         *
         * Usually, a LineItem, PresentationVariant or SelectionPresentationVariant annotation is expected, but
         * the Table building block can also be used to display an EntitySet.
         *
         *
         * If a PresentationVariant is specified, then it must have UI.LineItem as the first property of the Visualizations.
         *
         *
         * If a SelectionPresentationVariant is specified, then it must contain a valid PresentationVariant that
         * also has a UI.LineItem as the first property of the Visualizations.
         * Usage example:
         *
         * ```javascript
         *
         * sap.ui.require(["sap/fe/macros/table/Table"], function(Table) {
         * 	 ...
         * 	 new Table("myTable", {metaPath:"@com.sap.vocabularies.UI.v1.LineItem"})
         * })
         * ```
         *
         * This is currently an experimental API because the structure of the generated content will change to come
         * closer to the Table that you get out of templates.
         * The public method and property will not change but the internal structure will so be careful on your
         * usage.
         *
         *
         * @since 1.124.0
         * @experimental As of version 1.124.0.
         */
        class Table extends sap.fe.macros.controls.BuildingBlockWithTemplating {
          /**
           * Adds an action to the table.
           *
           * @since 1.124.0
           * @experimental As of version 1.124.0.
           *
           * @returns Reference to this in order to allow method chaining
           */
          addAction(
            /**
             * The action to add
             */
            action: sap.fe.macros.table.Action
          ): this;
          /**
           * Adds a column to the table.
           *
           * @since 1.124.0
           * @experimental As of version 1.124.0.
           *
           * @returns Reference to this in order to allow method chaining
           */
          addColumn(
            /**
             * The column to add
             */
            column: sap.fe.macros.table.Column
          ): this;
          /**
           * Adds a message to the table.
           * The message applies to the whole table and not to an individual table row.
           *
           *
           *
           * @returns Promise The ID of the message
           */
          addMessage(
            /**
             * The parameters to create the message
             */
            parameters: {
              /**
               * Message description
               */
              description?: string;
              /**
               * Message text
               */
              message?: string;
              /**
               * True if the message is persistent
               */
              persistent?: boolean;
              /**
               * Message type
               */
              type?: /* was: sap.ui.core.message.MessageType */ any;
            }
          ): Promise<string>;
          /**
           * Get the count of the row binding of the table.
           *
           *
           * @returns The count of the row binding
           */
          getCount(): number | undefined;
          /**
           * Get the variant management applied to the table.
           *
           *
           * @returns Key of the currently selected variant. In case the model is not yet set, `null` will be returned.
           */
          getCurrentVariantKey(): null | string;
          /**
           * Get the fields that should be ignored when generating the table.
           *
           * @since 1.124.0
           * @experimental As of version 1.124.0.
           *
           * @returns The value of the ignoredFields property
           */
          getIgnoredFields(): string;
          /**
           * Gets the path to the metadata that should be used to generate the table.
           *
           * @since 1.124.0
           * @experimental As of version 1.124.0.
           *
           * @returns The path to the metadata
           */
          getMetaPath(): string;
          /**
           * Get the presentation variant that is currently applied on the table.
           *
           *
           * @returns The presentation variant applied to the table
           */
          getPresentationVariant(): Promise<sap.fe.navigation.PresentationVariant>;
          /**
           * Gets contexts from the table that have been selected by the user.
           *
           *
           * @returns Contexts of the rows selected by the user
           */
          getSelectedContexts(): sap.ui.model.odata.v4.Context[];
          /**
           * Get the selection variant from the table. This function considers only the selection variant applied
           * at the control level.
           *
           *
           * @returns A promise which resolves with {@link sap.fe.navigation.SelectionVariant }
           */
          getSelectionVariant(): Promise<sap.fe.navigation.SelectionVariant>;
          /**
           * Hide the columns with the given column keys by setting their availability to Default.
           *
           * @since 1.124.0
           * @experimental As of version 1.124.0.
           *
           * @returns Promise
           */
          hideColumns(
            /**
             * The keys for the columns to hide
             */
            columnKeys: string[]
          ): Promise<void>;
          /**
           * Requests a refresh of the table.
           */
          refresh(): void;
          /**
           * Removes an action from the table.
           *
           * @since 1.124.0
           * @experimental As of version 1.124.0.
           *
           * @returns The removed action or null
           */
          removeAction(
            /**
             * The action to remove, or its index or ID
             */
            action: number | sap.fe.macros.table.Action | string
          ): null | sap.fe.macros.table.Action;
          /**
           * Removes a column from the table.
           *
           * @since 1.124.0
           * @experimental As of version 1.124.0.
           *
           * @returns The removed column or null
           */
          removeColumn(
            /**
             * The column to remove, or its index or ID
             */
            column: number | sap.fe.macros.table.Column | string
          ): null | sap.fe.macros.table.Column;
          /**
           * Removes a message from the table.
           */
          removeMessage(
            /**
             * The id of the message
             */
            id: string
          ): void;
          /**
           * Set a variant management to the table.
           */
          setCurrentVariantKey(
            /**
             * Key of the variant that should be selected. If the passed key doesn't identify a variant, it will be
             * ignored.
             */
            key: string
          ): void;
          /**
           * Sets the fields that should be ignored when generating the table.
           *
           * @since 1.124.0
           * @experimental As of version 1.124.0.
           *
           * @returns Reference to this in order to allow method chaining
           */
          setIgnoredFields(
            /**
             * The fields to ignore
             */
            ignoredFields: string
          ): this;
          /**
           * Sets the path to the metadata that should be used to generate the table.
           *
           * @since 1.124.0
           * @experimental As of version 1.124.0.
           *
           * @returns Reference to this in order to allow method chaining
           */
          setMetaPath(
            /**
             * The path to the metadata
             */
            metaPath: string
          ): this;
          /**
           * Set a new presentation variant to the table.
           */
          setPresentationVariant(
            /**
             * The new presentation variant that is to be set on the table.
             */
            tablePV: sap.fe.navigation.PresentationVariant
          ): Promise<void>;
          /**
           * Sets {@link sap.fe.navigation.SelectionVariant } to the table. Note: setSelectionVariant will clear existing
           * filters and then apply the SelectionVariant values.
           *
           *
           * @returns A promise for asynchronous handling
           */
          setSelectionVariant(
            /**
             * The {@link sap.fe.navigation.SelectionVariant } to apply to the table
             */
            selectionVariant: sap.fe.navigation.SelectionVariant,
            /**
             * Optional. If true, we will use the associated text property values (if they're available in the SelectionVariant)
             * to display the filter value descriptions, instead of loading them from the backend
             */
            prefillDescriptions?: boolean
          ): Promise<any>;
          /**
           * Show the columns with the given column keys by setting their availability to Default.
           *
           * @since 1.124.0
           * @experimental As of version 1.124.0.
           *
           * @returns Promise
           */
          showColumns(
            /**
             * The keys for the columns to show
             */
            columnKeys: string[]
          ): Promise<void>;
        }
        /**
         * Create options for the table.
         */
        class TableCreationOptions extends sap.fe.macros.controls
          .BuildingBlockObjectProperty {}
        /**
         * Building block used to create a table based on the metadata provided by OData V4.
         *
         *
         * Usually, a LineItem, PresentationVariant or SelectionPresentationVariant annotation is expected, but
         * the Table building block can also be used to display an EntitySet.
         *
         *
         * If a PresentationVariant is specified, then it must have UI.LineItem as the first property of the Visualizations.
         *
         *
         * If a SelectionPresentationVariant is specified, then it must contain a valid PresentationVariant that
         * also has a UI.LineItem as the first property of the Visualizations.
         * Usage example:
         *
         * ```javascript
         *
         * sap.ui.require(["sap/fe/macros/table/TreeTable"], function(TreeTable) {
         * 	 ...
         * 	 new TreeTable("myTable", {metaPath:"@com.sap.vocabularies.UI.v1.LineItem"})
         * })
         * ```
         *
         * This is currently an experimental API because the structure of the generated content will change to come
         * closer to the Table that you get out of templates.
         * The public method and property will not change but the internal structure will so be careful on your
         * usage.
         *
         *
         * @since 1.125.0
         * @experimental As of version 1.125.0.
         */
        class TreeTable extends sap.fe.macros.controls
          .BuildingBlockWithTemplating {
          /**
           * Adds an action to the table.
           *
           * @since 1.125.0
           * @experimental As of version 1.125.0.
           *
           * @returns Reference to this in order to allow method chaining
           */
          addAction(
            /**
             * The action to add
             */
            action: sap.fe.macros.table.Action
          ): this;
          /**
           * Adds a column to the table.
           *
           * @since 1.124.0
           * @experimental As of version 1.124.0.
           *
           * @returns Reference to this in order to allow method chaining
           */
          addColumn(
            /**
             * The column to add
             */
            column: sap.fe.macros.table.Column
          ): this;
          /**
           * Adds a message to the table.
           * The message applies to the whole table and not to an individual table row.
           *
           *
           *
           * @returns Promise The ID of the message
           */
          addMessage(
            /**
             * The parameters to create the message
             */
            parameters: {
              /**
               * Message description
               */
              description?: string;
              /**
               * Message text
               */
              message?: string;
              /**
               * True if the message is persistent
               */
              persistent?: boolean;
              /**
               * Message type
               */
              type?: /* was: sap.ui.core.message.MessageType */ any;
            }
          ): Promise<string>;
          /**
           * Get the count of the row binding of the table.
           *
           *
           * @returns The count of the row binding
           */
          getCount(): number | undefined;
          /**
           * Get the variant management applied to the table.
           *
           *
           * @returns Key of the currently selected variant. In case the model is not yet set, `null` will be returned.
           */
          getCurrentVariantKey(): null | string;
          /**
           * Get the fields that should be ignored when generating the table.
           *
           * @since 1.125.0
           * @experimental As of version 1.125.0.
           *
           * @returns The value of the ignoredFields property
           */
          getIgnoredFields(): string;
          /**
           * Gets the path to the metadata that should be used to generate the table.
           *
           * @since 1.125.0
           * @experimental As of version 1.125.0.
           *
           * @returns The path to the metadata
           */
          getMetaPath(): string;
          /**
           * Get the presentation variant that is currently applied on the table.
           *
           *
           * @returns The presentation variant applied to the table
           */
          getPresentationVariant(): Promise<sap.fe.navigation.PresentationVariant>;
          /**
           * Gets contexts from the table that have been selected by the user.
           *
           *
           * @returns Contexts of the rows selected by the user
           */
          getSelectedContexts(): sap.ui.model.odata.v4.Context[];
          /**
           * Get the selection variant from the table. This function considers only the selection variant applied
           * at the control level.
           *
           *
           * @returns A promise which resolves with {@link sap.fe.navigation.SelectionVariant }
           */
          getSelectionVariant(): Promise<sap.fe.navigation.SelectionVariant>;
          /**
           * Hide the columns with the given column keys by setting their availability to Default.
           *
           * @since 1.124.0
           * @experimental As of version 1.124.0.
           *
           * @returns Promise
           */
          hideColumns(
            /**
             * The keys for the columns to hide
             */
            columnKeys: string[]
          ): Promise<void>;
          /**
           * Requests a refresh of the table.
           */
          refresh(): void;
          /**
           * Removes an action from the table.
           *
           * @since 1.125.0
           * @experimental As of version 1.125.0.
           *
           * @returns The removed action or null
           */
          removeAction(
            /**
             * The action to remove, or its index or ID
             */
            action: number | sap.fe.macros.table.Action | string
          ): null | sap.fe.macros.table.Action;
          /**
           * Removes a column from the table.
           *
           * @since 1.125.0
           * @experimental As of version 1.125.0.
           *
           * @returns The removed column or null
           */
          removeColumn(
            /**
             * The column to remove, or its index or ID
             */
            column: number | sap.fe.macros.table.Column | string
          ): null | sap.fe.macros.table.Column;
          /**
           * Removes a message from the table.
           */
          removeMessage(
            /**
             * The id of the message
             */
            id: string
          ): void;
          /**
           * Set a variant management to the table.
           */
          setCurrentVariantKey(
            /**
             * Key of the variant that should be selected. If the passed key doesn't identify a variant, it will be
             * ignored.
             */
            key: string
          ): void;
          /**
           * Sets the fields that should be ignored when generating the table.
           *
           * @since 1.125.0
           * @experimental As of version 1.125.0.
           *
           * @returns Reference to this in order to allow method chaining
           */
          setIgnoredFields(
            /**
             * The fields to ignore
             */
            ignoredFields: string
          ): this;
          /**
           * Sets the path to the metadata that should be used to generate the table.
           *
           * @since 1.125.0
           * @experimental As of version 1.125.0.
           *
           * @returns Reference to this in order to allow method chaining
           */
          setMetaPath(
            /**
             * The path to the metadata
             */
            metaPath: string
          ): this;
          /**
           * Set a new presentation variant to the table.
           */
          setPresentationVariant(
            /**
             * The new presentation variant that is to be set on the table.
             */
            tablePV: sap.fe.navigation.PresentationVariant
          ): Promise<void>;
          /**
           * Sets {@link sap.fe.navigation.SelectionVariant } to the table. Note: setSelectionVariant will clear existing
           * filters and then apply the SelectionVariant values.
           *
           *
           * @returns A promise for asynchronous handling
           */
          setSelectionVariant(
            /**
             * The {@link sap.fe.navigation.SelectionVariant } to apply to the table
             */
            selectionVariant: sap.fe.navigation.SelectionVariant,
            /**
             * Optional. If true, we will use the associated text property values (if they're available in the SelectionVariant)
             * to display the filter value descriptions, instead of loading them from the backend
             */
            prefillDescriptions?: boolean
          ): Promise<any>;
          /**
           * Show the columns with the given column keys by setting their availability to Default.
           *
           * @since 1.124.0
           * @experimental As of version 1.124.0.
           *
           * @returns Promise
           */
          showColumns(
            /**
             * The keys for the columns to show
             */
            columnKeys: string[]
          ): Promise<void>;
        }
        /**
         * Create options for the tree table.
         */
        class TreeTableCreationOptions extends sap.fe.macros.controls
          .BuildingBlockObjectProperty {}

        /**
         * Event object of the Action#press event.
         */
        type Action$PressEvent = sap.ui.base.Event<
          Action$PressEventParameters,
          Action
        >;

        /**
         * Event object of the Table#beforeRebindTable event.
         */
        type Table$BeforeRebindTableEvent = sap.ui.base.Event<
          Table$BeforeRebindTableEventParameters,
          Table
        >;

        /**
         * Event object of the Table#rowPress event.
         */
        type Table$RowPressEvent = sap.ui.base.Event<
          Table$RowPressEventParameters,
          Table
        >;

        /**
         * Event object of the Table#selectionChange event.
         */
        type Table$SelectionChangeEvent = sap.ui.base.Event<
          Table$SelectionChangeEventParameters,
          Table
        >;

        /**
         * Event object of the TreeTable#beforeRebindTable event.
         */
        type TreeTable$BeforeRebindTableEvent = sap.ui.base.Event<
          TreeTable$BeforeRebindTableEventParameters,
          TreeTable
        >;

        /**
         * Event object of the TreeTable#rowPress event.
         */
        type TreeTable$RowPressEvent = sap.ui.base.Event<
          TreeTable$RowPressEventParameters,
          TreeTable
        >;

        /**
         * Event object of the TreeTable#selectionChange event.
         */
        type TreeTable$SelectionChangeEvent = sap.ui.base.Event<
          TreeTable$SelectionChangeEventParameters,
          TreeTable
        >;
      }
      /**
       * Describes the settings that can be provided to the Chart constructor.
       */
      interface $ChartSettings extends sap.fe.macros.$MacroAPISettings {
        /**
         * Metadata path to the entitySet or navigationProperty
         */
        contextPath?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Id of the FilterBar building block associated with the chart.
         */
        filterBar?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Specifies the header text that is shown in the chart
         */
        header?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Controls if the header text should be shown or not
         */
        headerVisible?:
          | boolean
          | sap.ui.base.ManagedObject.PropertyBindingInfo
          | `{${string}}`;

        /**
         * Metadata path to the presentation context (UI.Chart with or without a qualifier)
         */
        metaPath?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Controls which options should be enabled for the chart personalization dialog.
         * If it is set to `true`, all possible options for this kind of chart are enabled.
         *
         * If it is set to `false`, personalization is disabled.
         *
         *
         *
         * You can also provide a more granular control for the personalization by providing a comma-separated list
         * with the options you want to be available.
         *
         * Available options are:
         *
         * - Sort
         *
         * - Type
         *
         * - Item
         *
         * - Filter
         */
        personalization?:
          | string
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Defines the selection mode to be used by the chart.
         * Allowed values are `None`, `Single` or `Multiple`
         */
        selectionMode?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Controls the kind of variant management that should be enabled for the chart.
         * Allowed value is `Control`.
         *
         * If set with value `Control`, a variant management control is seen within the chart and the chart is linked
         * to this.
         *
         * If not set with any value, variant management control is not available for this chart.
         */
        variantManagement?:
          | string
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Aggregate actions of the chart.
         */
        actions?:
          | Array<sap.fe.macros.chart.ActionGroup | sap.fe.macros.chart.Action>
          | sap.fe.macros.chart.ActionGroup
          | sap.fe.macros.chart.Action
          | sap.ui.base.ManagedObject.AggregationBindingInfo
          | `{${string}}`;
      }

      /**
       * Describes the settings that can be provided to the Field constructor.
       */
      interface $FieldSettings extends sap.fe.macros.$MacroAPISettings {
        /**
         * Defines the path of the context used in the current page or block.
         * This setting is defined by the framework.
         */
        contextPath?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * This is used to optionally provide an external description that comes from a different model than the
         * oData model.
         * This should be used in conjunction with the value property.
         */
        description?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Defines the relative path of the property in the metamodel, based on the current contextPath.
         */
        metaPath?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * An expression that allows you to control the read-only state of the field.
         * If you do not set any expression, SAP Fiori elements hooks into the standard lifecycle to determine the
         * current state.
         */
        readOnly?:
          | boolean
          | sap.ui.base.ManagedObject.PropertyBindingInfo
          | `{${string}}`;

        /**
         * Option to add semantic objects for a field.
         * This parameter overwrites the semantic objects defined through annotations.
         * Valid options are either a single semantic object, a stringified array of semantic objects,
         * a formatter or a single binding expression returning either a single semantic object or an array of semantic
         * objects.
         */
        semanticObject?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * This is used to optionally provide an external value that comes from a different model than the OData
         * model.
         * It is designed to work with a field with value help, and without support for complex value help (currency
         * / unit).
         */
        value?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * A set of options that can be configured.
         */
        formatOptions?: sap.fe.macros.field.FieldFormatOptions;
      }

      /**
       * Describes the settings that can be provided to the KPITag constructor.
       */
      interface $KPITagSettings
        extends sap.fe.core.buildingBlocks.$BuildingBlockSettings {
        /**
         * The Number to be displayed.
         */
        number?:
          | any
          | sap.ui.base.ManagedObject.PropertyBindingInfo
          | `{${string}}`;

        /**
         * Set it to `true` if the KPI should display its status icon.
         */
        showIcon?:
          | boolean
          | sap.ui.base.ManagedObject.PropertyBindingInfo
          | `{${string}}`;

        /**
         * The Status to be displayed.
         */
        status?:
          | any
          | sap.ui.base.ManagedObject.PropertyBindingInfo
          | `{${string}}`;

        /**
         * The Text to be displayed.
         */
        text?:
          | any
          | sap.ui.base.ManagedObject.PropertyBindingInfo
          | `{${string}}`;

        /**
         * The Tooltip to be displayed.
         */
        tooltip?:
          | any
          | sap.ui.base.ManagedObject.PropertyBindingInfo
          | `{${string}}`;

        /**
         * The Unit of Measure of the number to be displayed.
         */
        unit?:
          | any
          | sap.ui.base.ManagedObject.PropertyBindingInfo
          | `{${string}}`;
      }

      /**
       * Describes the settings that can be provided to the MacroAPI constructor.
       */
      interface $MacroAPISettings
        extends sap.fe.core.buildingBlocks.$BuildingBlockSettings {
        /**
         * Defines the path of the context used in the current page or block.
         * This setting is defined by the framework.
         */
        contextPath?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Defines the relative path of the property in the metamodel, based on the current contextPath.
         */
        metaPath?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;
      }

      /**
       * Describes the settings that can be provided to the MessageButton constructor.
       */
      interface $MessageButtonSettings
        extends sap.fe.core.buildingBlocks.$BuildingBlockSettings {}

      /**
       * Describes the settings that can be provided to the MicroChart constructor.
       */
      interface $MicroChartSettings
        extends sap.fe.core.buildingBlocks.$BuildingBlockSettings {
        /**
         * context path to the MicroChart.
         */
        contextPath?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Show blank space in case there is no data in the chart
         */
        hideOnNoData?:
          | boolean
          | sap.ui.base.ManagedObject.PropertyBindingInfo
          | `{${string}}`;

        /**
         * Metadata path to the  MicroChart.
         */
        metaPath?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * To control the rendering of Title, Subtitle and Currency Labels. When the size is xs then we do
         * not see the inner labels of the MicroChart as well.
         */
        showOnlyChart?:
          | boolean
          | sap.ui.base.ManagedObject.PropertyBindingInfo
          | `{${string}}`;

        /**
         * Size of the MicroChart
         */
        size?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;
      }

      /**
       * Describes the settings that can be provided to the MultiValueField constructor.
       */
      interface $MultiValueFieldSettings
        extends sap.fe.core.buildingBlocks.$BuildingBlockSettings {
        /**
         * The context path provided for the MultiValueField
         */
        contextPath?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Property added to be able to add data / items to the multi-input field using a different model
         */
        items?:
          | any
          | sap.ui.base.ManagedObject.PropertyBindingInfo
          | `{${string}}`;

        /**
         * Defines the relative Metadata path to the MultiValueField.
         * The metaPath should point to a Property or DataField.
         */
        metaPath?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * The readOnly flag
         */
        readOnly?:
          | boolean
          | sap.ui.base.ManagedObject.PropertyBindingInfo
          | `{${string}}`;
      }

      /**
       * Describes the settings that can be provided to the Page constructor.
       */
      interface $PageSettings
        extends sap.fe.core.buildingBlocks.$BuildingBlockSettings {
        /**
         * Avatar source of the page. It is considered only if the title property is specified.
         */
        avatarSrc?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Description of the page. It is considered only if the title property is specified.
         */
        description?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Title of the page
         * If title is not given, then we will add a title, avatar and description based on the unqualified HeaderInfo
         * associated to the entity
         */
        title?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Content(s) of the page
         */
        items?:
          | sap.ui.core.Control[]
          | sap.ui.core.Control
          | sap.ui.base.ManagedObject.AggregationBindingInfo
          | `{${string}}`;
      }

      /**
       * Describes the settings that can be provided to the Paginator constructor.
       */
      interface $PaginatorSettings
        extends sap.fe.core.buildingBlocks.$BuildingBlockSettings {
        /**
         * Title of the object that is readout by screen readers when the next/previous item is loaded via keyboard
         * focus on the paginator button.
         */
        ariaTitle?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;
      }

      /**
       * Describes the settings that can be provided to the RichTextEditor constructor.
       */
      interface $RichTextEditorSettings
        extends sap.fe.core.buildingBlocks.$BuildingBlockSettings {
        /**
         * With the 'excludeDefaultPlugins' you can ask to remove the plugins that will be added by default
         * The default plugins are "emoticons" "directionality" "image" "table" "link" "powerpaste".
         */
        excludeDefaultPlugins?:
          | boolean
          | sap.ui.base.ManagedObject.PropertyBindingInfo
          | `{${string}}`;

        /**
         * Use the readOnly attribute to override the edit flow of the page.
         * By setting 'readOnly' to true, a FormattedText will be displayed instead of the editor.
         */
        readOnly?:
          | boolean
          | sap.ui.base.ManagedObject.PropertyBindingInfo
          | `{${string}}`;

        /**
         * Use the 'required' attribute to make sure that the editor is filled with some text.
         */
        required?:
          | any
          | sap.ui.base.ManagedObject.PropertyBindingInfo
          | `{${string}}`;

        /**
         * The value contained in the editor. You can use this attribute to set a default value.
         */
        value?:
          | any
          | sap.ui.base.ManagedObject.PropertyBindingInfo
          | `{${string}}`;

        /**
         * With the 'buttonGroups' attribute you can customize the buttons that are displayed on the toolbar of
         * the editor.
         */
        buttonGroups?:
          | sap.fe.macros.richtexteditor.ButtonGroup[]
          | sap.fe.macros.richtexteditor.ButtonGroup
          | sap.ui.base.ManagedObject.AggregationBindingInfo
          | `{${string}}`;

        /**
         * With the 'plugins' attribute you can customize the plugins that will be loaded by the editor.
         */
        plugins?:
          | sap.fe.macros.richtexteditor.Plugin[]
          | sap.fe.macros.richtexteditor.Plugin
          | sap.ui.base.ManagedObject.AggregationBindingInfo
          | `{${string}}`;
      }

      /**
       * Describes the settings that can be provided to the RichTextEditorWithMetadata constructor.
       */
      interface $RichTextEditorWithMetadataSettings
        extends sap.fe.macros.$RichTextEditorSettings {
        /**
         * The context path of the property displayed
         */
        contextPath?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * The metaPath of the displayed property
         */
        metaPath?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;
      }

      /**
       * Describes the settings that can be provided to the Share constructor.
       */
      interface $ShareSettings
        extends sap.fe.core.buildingBlocks.$BuildingBlockSettings {
        /**
         * Supported Share options {@link sap.fe.macros.share.ShareOptions }.
         */
        shareOptions?: sap.fe.macros.share.ShareOptions;
      }

      /**
       * Describes the settings that can be provided to the VariantManagement constructor.
       */
      interface $VariantManagementSettings
        extends sap.fe.core.buildingBlocks.$BuildingBlockSettings {
        /**
         * A list of control IDs to which the variant management is applied.
         */
        for?:
          | string[]
          | sap.ui.base.ManagedObject.PropertyBindingInfo
          | `{${string}}`;

        /**
         * Header level for the variant management, determining its position or style.
         */
        headerLevel?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Identifier for the variant management control.
         */
        id?:
          | any
          | sap.ui.base.ManagedObject.PropertyBindingInfo
          | `{${string}}`;

        /**
         * Whether the "Set as Default" option is visible.
         */
        showSetAsDefault?:
          | boolean
          | sap.ui.base.ManagedObject.PropertyBindingInfo
          | `{${string}}`;
      }

      /**
       * Describes the settings that can be provided to the FlexibleColumnLayoutActions constructor.
       */
      interface $FlexibleColumnLayoutActionsSettings
        extends sap.ui.core.$ControlSettings {}

      /**
       * Describes the settings that can be provided to the FilterBar constructor.
       */
      interface $FilterBarSettings extends sap.fe.macros.$MacroAPISettings {
        /**
         * Defines the path of the context used in the current page or block.
         * This setting is defined by the framework.
         */
        contextPath?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * If true, the search is triggered automatically when a filter value is changed.
         */
        liveMode?:
          | boolean
          | sap.ui.base.ManagedObject.PropertyBindingInfo
          | `{${string}}`;

        /**
         * Defines the relative path of the property in the metamodel, based on the current contextPath.
         */
        metaPath?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Handles the visibility of the 'Clear' button on the FilterBar.
         */
        showClearButton?:
          | boolean
          | sap.ui.base.ManagedObject.PropertyBindingInfo
          | `{${string}}`;

        /**
         * Displays possible errors during the search in a message box
         */
        showMessages?:
          | boolean
          | sap.ui.base.ManagedObject.PropertyBindingInfo
          | `{${string}}`;

        /**
         * Parameter which sets the visibility of the FilterBar building block
         */
        visible?:
          | boolean
          | sap.ui.base.ManagedObject.PropertyBindingInfo
          | `{${string}}`;

        /**
         * Aggregate filter fields of the FilterBar building block
         */
        filterFields?:
          | sap.fe.macros.filterBar.FilterField[]
          | sap.fe.macros.filterBar.FilterField
          | sap.ui.base.ManagedObject.AggregationBindingInfo
          | `{${string}}`;
      }

      /**
       * Describes the settings that can be provided to the Form constructor.
       */
      interface $FormSettings extends sap.ui.core.$ControlSettings {
        /**
         * Defines the path of the context used in the current page or block.
         * This setting is defined by the framework.
         */
        contextPath?:
          | sap.ui.model.Context
          | sap.ui.base.ManagedObject.PropertyBindingInfo
          | `{${string}}`;

        /**
         * Defines the relative path of the property in the metamodel, based on the current contextPath.
         */
        metaPath?:
          | sap.ui.model.Context
          | sap.ui.base.ManagedObject.PropertyBindingInfo
          | `{${string}}`;

        /**
         * The title of the form control.
         */
        title?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;
      }

      /**
       * Describes the settings that can be provided to the Table constructor.
       */
      interface $TableSettings extends sap.fe.macros.$MacroAPISettings {
        /**
         * An expression that allows you to control the 'busy' state of the table.
         */
        busy?:
          | boolean
          | sap.ui.base.ManagedObject.PropertyBindingInfo
          | `{${string}}`;

        /**
         * Determines whether the table adapts to the condensed layout.
         */
        condensedTableLayout?:
          | boolean
          | sap.ui.base.ManagedObject.PropertyBindingInfo
          | `{${string}}`;

        /**
         * Defines the path of the context used in the current page or block.
         * This setting is defined by the framework.
         */
        contextPath?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * A set of options that can be configured.
         */
        creationMode?:
          | sap.fe.macros.table.TableCreationOptions
          | sap.ui.base.ManagedObject.PropertyBindingInfo
          | `{${string}}`;

        /**
         * Determines whether the number of fixed columns can be configured in the Column Settings dialog.
         * This property doesn't apply for responsive tables
         */
        disableColumnFreeze?:
          | boolean
          | sap.ui.base.ManagedObject.PropertyBindingInfo
          | `{${string}}`;

        /**
         * Controls if the copy functionality of the table is disabled or not.
         */
        disableCopyToClipboard?:
          | boolean
          | sap.ui.base.ManagedObject.PropertyBindingInfo
          | `{${string}}`;

        /**
         * Specifies if the column width is automatically calculated.
         */
        enableAutoColumnWidth?:
          | boolean
          | sap.ui.base.ManagedObject.PropertyBindingInfo
          | `{${string}}`;

        /**
         * Controls if the export functionality of the table is enabled or not.
         */
        enableExport?:
          | boolean
          | sap.ui.base.ManagedObject.PropertyBindingInfo
          | `{${string}}`;

        /**
         * Controls whether the table can be opened in fullscreen mode or not.
         */
        enableFullScreen?:
          | boolean
          | sap.ui.base.ManagedObject.PropertyBindingInfo
          | `{${string}}`;

        /**
         * Controls if the paste functionality of the table is enabled or not.
         */
        enablePaste?:
          | boolean
          | sap.ui.base.ManagedObject.PropertyBindingInfo
          | `{${string}}`;

        /**
         * Determine whether the data copied to the computed columns is sent to the back end.
         */
        enablePastingOfComputedProperties?:
          | boolean
          | sap.ui.base.ManagedObject.PropertyBindingInfo
          | `{${string}}`;

        /**
         * Determines whether the Clear All button is enabled by default.
         * To enable the Clear All button by default, you must set this property to false.
         */
        enableSelectAll?:
          | boolean
          | sap.ui.base.ManagedObject.PropertyBindingInfo
          | `{${string}}`;

        /**
         * Maximum allowed number of records to be exported in one request.
         */
        exportRequestSize?:
          | int
          | sap.ui.base.ManagedObject.PropertyBindingInfo
          | `{${string}}`;

        /**
         * ID of the FilterBar building block associated with the table.
         */
        filterBar?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Number of columns that are fixed on the left. Only columns which are not fixed can be scrolled horizontally.
         * This property is not relevant for responsive tables
         */
        frozenColumnCount?:
          | int
          | sap.ui.base.ManagedObject.PropertyBindingInfo
          | `{${string}}`;

        /**
         * Specifies the header text that is shown in the table.
         */
        header?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Controls if the header text should be shown or not.
         */
        headerVisible?:
          | boolean
          | sap.ui.base.ManagedObject.PropertyBindingInfo
          | `{${string}}`;

        /**
         * Comma-separated value of fields that must be ignored in the OData metadata by the Table building block.
         *
         * The table building block is not going to create built-in columns or offer table personalization for comma-separated
         * value of fields that are provided in the ignoredfields.
         *
         * Any column referencing an ignored field is to be removed.
         */
        ignoredFields?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Defines whether to display the search action.
         */
        isSearchable?:
          | boolean
          | sap.ui.base.ManagedObject.PropertyBindingInfo
          | `{${string}}`;

        /**
         * Defines the relative path to a LineItem, PresentationVariant or SelectionPresentationVariant in the metamodel,
         * based on the current contextPath.
         */
        metaPath?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Changes the size of the IllustratedMessage in the table, or removes it completely.
         * Allowed values are `illustratedMessage-Auto`, `illustratedMessage-Base`, `illustratedMessage-Dialog`,
         * `illustratedMessage-Dot`, `illustratedMessage-Scene`, `illustratedMessage-Spot` or `text`.
         */
        modeForNoDataMessage?:
          | string
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Controls which options should be enabled for the table personalization dialog.
         * If it is set to `true`, all possible options for this kind of table are enabled.
         *
         * If it is set to `false`, personalization is disabled.
         *
         *
         *
         * You can also provide a more granular control for the personalization by providing a comma-separated list
         * with the options you want to be available.
         *
         * Available options are:
         *
         * - Sort
         *
         * - Column
         *
         * - Filter
         *
         * - Group
         *
         *
         *
         * The Group option is only applicable to analytical tables and responsive tables.
         */
        personalization?:
          | string
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Defines the layout options of the table popins. Only applies to responsive tables.
         * Allowed values are `Block`, `GridLarge`, and `GridSmall`.
         *
         * - `Block`: Sets a block layout for rendering the table popins. The elements inside the popin container
         *     are rendered one below the other.
         *
         * - `GridLarge`: Sets a grid layout for rendering the table popins. The grid width for each table popin
         *     is comparatively larger than GridSmall, so this layout allows less content to be rendered in a single
         *     popin row.
         *
         * - `GridSmall`: Sets a grid layout for rendering the table popins. The grid width for each table popin
         *     is small, so this layout allows more content to be rendered in a single popin row.
         */
        popinLayout?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * An expression that allows you to control the 'read-only' state of the table.
         * If you do not set any expression, SAP Fiori elements hooks into the standard lifecycle to determine the
         * current state.
         */
        readOnly?:
          | boolean
          | sap.ui.base.ManagedObject.PropertyBindingInfo
          | `{${string}}`;

        /**
         * Number of rows to be displayed in the table. Does not apply to responsive tables.
         */
        rowCount?:
          | int
          | sap.ui.base.ManagedObject.PropertyBindingInfo
          | `{${string}}`;

        /**
         * Defines how the table handles the visible rows. Does not apply to Responsive tables.
         * Allowed values are `Auto`, `Fixed`, and `Interactive`.
         *
         * - If set to `Fixed`, the table always has as many rows as defined in the rowCount property.
         *
         * - If set to `Auto`, the number of rows is changed by the table automatically. It will then adjust its
         *     row count to the space it is allowed to cover (limited by the surrounding container) but it cannot have
         *     less than defined in the `rowCount` property.
         *
         * - If set to `Interactive` the table can have as many rows as defined in the rowCount property. This number
         *     of rows can be modified by dragging the resizer available in this mode.
         */
        rowCountMode?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Defines how many additional data records are requested from the back-end system when the user scrolls
         * vertically in the table.
         */
        scrollThreshold?:
          | int
          | sap.ui.base.ManagedObject.PropertyBindingInfo
          | `{${string}}`;

        /**
         * Defines the maximum number of rows that can be selected at once in the table.
         * This property does not apply to responsive tables.
         */
        selectionLimit?:
          | int
          | sap.ui.base.ManagedObject.PropertyBindingInfo
          | `{${string}}`;

        /**
         * Defines the selection mode to be used by the table.
         * Allowed values are `None`, `Single`, `ForceSingle`, `Multi`, `ForceMulti` or `Auto`.
         * If set to 'Single', 'Multi' or 'Auto', SAP Fiori elements hooks into the standard lifecycle to determine
         * the consistent selection mode.
         * If set to 'ForceSingle' or 'ForceMulti' your choice will be respected but this might not respect the
         * Fiori guidelines.
         */
        selectionMode?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Defines the number of records to be initially requested from the back end.
         */
        threshold?:
          | int
          | sap.ui.base.ManagedObject.PropertyBindingInfo
          | `{${string}}`;

        /**
         * Defines the type of table that will be used by the building block to render the data.
         * Allowed values are `GridTable`, `ResponsiveTable` and `AnalyticalTable`.
         */
        type?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Controls the kind of variant management that should be enabled for the table.
         * Allowed value is `Control`.
         *
         * If set with value `Control`, a variant management control is seen within the table and the table is linked
         * to this.
         *
         * If not set with any value, control level variant management is not available for this table.
         */
        variantManagement?:
          | string
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Indicates if the column header should be a part of the width calculation.
         */
        widthIncludingColumnHeader?:
          | boolean
          | sap.ui.base.ManagedObject.PropertyBindingInfo
          | `{${string}}`;

        /**
         * Aggregate actions of the table.
         */
        actions?:
          | Array<sap.fe.macros.table.ActionGroup | sap.fe.macros.table.Action>
          | sap.fe.macros.table.ActionGroup
          | sap.fe.macros.table.Action
          | sap.ui.base.ManagedObject.AggregationBindingInfo
          | `{${string}}`;

        /**
         * A set of options that can be configured to control the aggregation behavior
         */
        analyticalConfiguration?: sap.fe.macros.table.AnalyticalConfiguration;

        /**
         * Aggregate columns of the table.
         */
        columns?:
          | Array<
              sap.fe.macros.table.ColumnOverride | sap.fe.macros.table.Column
            >
          | sap.fe.macros.table.ColumnOverride
          | sap.fe.macros.table.Column
          | sap.ui.base.ManagedObject.AggregationBindingInfo
          | `{${string}}`;

        /**
         * Aggregate mass edit of the table.
         */
        massEdit?: sap.fe.macros.table.MassEdit;

        /**
         * Aggregation to forward the IllustratedMessage control to the mdc control.
         */
        noData?:
          | sap.m.Text
          | sap.m.IllustratedMessage
          | sap.ui.base.ManagedObject.PropertyBindingInfo
          | `{${string}}`;

        /**
         * Aggregate quickVariantSelection of the table.
         */
        quickVariantSelection?: sap.fe.macros.table.QuickVariantSelection;
      }

      /**
       * Describes the settings that can be provided to the TreeTable constructor.
       */
      interface $TreeTableSettings extends sap.fe.macros.$MacroAPISettings {
        /**
         * An expression that allows you to control the 'busy' state of the table.
         */
        busy?:
          | boolean
          | sap.ui.base.ManagedObject.PropertyBindingInfo
          | `{${string}}`;

        /**
         * Determines whether the table adapts to the condensed layout.
         */
        condensedTableLayout?:
          | boolean
          | sap.ui.base.ManagedObject.PropertyBindingInfo
          | `{${string}}`;

        /**
         * Defines the path of the context used in the current page or block.
         * This setting is defined by the framework.
         */
        contextPath?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * A set of options that can be configured.
         */
        creationMode?:
          | sap.fe.macros.table.TreeTableCreationOptions
          | sap.ui.base.ManagedObject.PropertyBindingInfo
          | `{${string}}`;

        /**
         * Determines whether the number of fixed columns can be configured in the Column Settings dialog.
         * This property doesn't apply for responsive tables
         */
        disableColumnFreeze?:
          | boolean
          | sap.ui.base.ManagedObject.PropertyBindingInfo
          | `{${string}}`;

        /**
         * Controls if the copy functionality of the table is disabled or not.
         */
        disableCopyToClipboard?:
          | boolean
          | sap.ui.base.ManagedObject.PropertyBindingInfo
          | `{${string}}`;

        /**
         * Specifies if the column width is automatically calculated.
         */
        enableAutoColumnWidth?:
          | boolean
          | sap.ui.base.ManagedObject.PropertyBindingInfo
          | `{${string}}`;

        /**
         * Controls if the export functionality of the table is enabled or not.
         */
        enableExport?:
          | boolean
          | sap.ui.base.ManagedObject.PropertyBindingInfo
          | `{${string}}`;

        /**
         * Controls whether the table can be opened in fullscreen mode or not.
         */
        enableFullScreen?:
          | boolean
          | sap.ui.base.ManagedObject.PropertyBindingInfo
          | `{${string}}`;

        /**
         * Controls if the paste functionality of the table is enabled or not.
         */
        enablePaste?:
          | boolean
          | sap.ui.base.ManagedObject.PropertyBindingInfo
          | `{${string}}`;

        /**
         * Determine whether the data copied to the computed columns is sent to the back end.
         */
        enablePastingOfComputedProperties?:
          | boolean
          | sap.ui.base.ManagedObject.PropertyBindingInfo
          | `{${string}}`;

        /**
         * Determines whether the Clear All button is enabled by default.
         * To enable the Clear All button by default, you must set this property to false.
         */
        enableSelectAll?:
          | boolean
          | sap.ui.base.ManagedObject.PropertyBindingInfo
          | `{${string}}`;

        /**
         * Maximum allowed number of records to be exported in one request.
         */
        exportRequestSize?:
          | int
          | sap.ui.base.ManagedObject.PropertyBindingInfo
          | `{${string}}`;

        /**
         * ID of the FilterBar building block associated with the table.
         */
        filterBar?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Number of columns that are fixed on the left. Only columns which are not fixed can be scrolled horizontally.
         * This property is not relevant for responsive tables
         */
        frozenColumnCount?:
          | int
          | sap.ui.base.ManagedObject.PropertyBindingInfo
          | `{${string}}`;

        /**
         * Specifies the header text that is shown in the table.
         */
        header?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Controls if the header text should be shown or not.
         */
        headerVisible?:
          | boolean
          | sap.ui.base.ManagedObject.PropertyBindingInfo
          | `{${string}}`;

        /**
         * A set of options that can be configured.
         */
        hierarchyQualifier?:
          | string
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Comma-separated value of fields that must be ignored in the OData metadata by the Table building block.
         *
         * The table building block is not going to create built-in columns or offer table personalization for comma-separated
         * value of fields that are provided in the ignoredfields.
         *
         * Any column referencing an ignored field is to be removed.
         */
        ignoredFields?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Defines the extension point to control whether a source node can be copied to a specific parent node.
         */
        isCopyToPositionAllowed?:
          | string
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Defines the extension point to control whether a source node can be dropped on a specific parent node.
         */
        isMoveToPositionAllowed?:
          | string
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * efines the extension point to control whether a node can be copied.
         */
        isNodeCopyable?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Defines the extension point to control if a node can be dragged.
         */
        isNodeMovable?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Defines whether to display the search action.
         */
        isSearchable?:
          | boolean
          | sap.ui.base.ManagedObject.PropertyBindingInfo
          | `{${string}}`;

        /**
         * Defines the relative path to a LineItem, PresentationVariant or SelectionPresentationVariant in the metamodel,
         * based on the current contextPath.
         */
        metaPath?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Changes the size of the IllustratedMessage in the table, or removes it completely.
         * Allowed values are `illustratedMessage-Auto`, `illustratedMessage-Base`, `illustratedMessage-Dialog`,
         * `illustratedMessage-Dot`, `illustratedMessage-Scene`, `illustratedMessage-Spot` or `text`.
         */
        modeForNoDataMessage?:
          | string
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Controls which options should be enabled for the table personalization dialog.
         * If it is set to `true`, all possible options for this kind of table are enabled.
         *
         * If it is set to `false`, personalization is disabled.
         *
         *
         *
         * You can also provide a more granular control for the personalization by providing a comma-separated list
         * with the options you want to be available.
         *
         * Available options are:
         *
         * - Sort
         *
         * - Column
         *
         * - Filter
         *
         * - Group
         *
         *
         *
         * The Group option is only applicable to analytical tables and responsive tables.
         */
        personalization?:
          | string
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Defines the layout options of the table popins. Only applies to responsive tables.
         * Allowed values are `Block`, `GridLarge`, and `GridSmall`.
         *
         * - `Block`: Sets a block layout for rendering the table popins. The elements inside the popin container
         *     are rendered one below the other.
         *
         * - `GridLarge`: Sets a grid layout for rendering the table popins. The grid width for each table popin
         *     is comparatively larger than GridSmall, so this layout allows less content to be rendered in a single
         *     popin row.
         *
         * - `GridSmall`: Sets a grid layout for rendering the table popins. The grid width for each table popin
         *     is small, so this layout allows more content to be rendered in a single popin row.
         */
        popinLayout?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * An expression that allows you to control the 'read-only' state of the table.
         * If you do not set any expression, SAP Fiori elements hooks into the standard lifecycle to determine the
         * current state.
         */
        readOnly?:
          | boolean
          | sap.ui.base.ManagedObject.PropertyBindingInfo
          | `{${string}}`;

        /**
         * Number of rows to be displayed in the table. Does not apply to responsive tables.
         */
        rowCount?:
          | int
          | sap.ui.base.ManagedObject.PropertyBindingInfo
          | `{${string}}`;

        /**
         * Defines how the table handles the visible rows. Does not apply to Responsive tables.
         * Allowed values are `Auto`, `Fixed`, and `Interactive`.
         *
         * - If set to `Fixed`, the table always has as many rows as defined in the rowCount property.
         *
         * - If set to `Auto`, the number of rows is changed by the table automatically. It will then adjust its
         *     row count to the space it is allowed to cover (limited by the surrounding container) but it cannot have
         *     less than defined in the `rowCount` property.
         *
         * - If set to `Interactive` the table can have as many rows as defined in the rowCount property. This number
         *     of rows can be modified by dragging the resizer available in this mode.
         */
        rowCountMode?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Defines how many additional data records are requested from the back-end system when the user scrolls
         * vertically in the table.
         */
        scrollThreshold?:
          | int
          | sap.ui.base.ManagedObject.PropertyBindingInfo
          | `{${string}}`;

        /**
         * Defines the maximum number of rows that can be selected at once in the table.
         * This property does not apply to responsive tables.
         */
        selectionLimit?:
          | int
          | sap.ui.base.ManagedObject.PropertyBindingInfo
          | `{${string}}`;

        /**
         * Defines the selection mode to be used by the table.
         * Allowed values are `None`, `Single`, `ForceSingle`, `Multi`, `ForceMulti` or `Auto`.
         * If set to 'Single', 'Multi' or 'Auto', SAP Fiori elements hooks into the standard lifecycle to determine
         * the consistent selection mode.
         * If set to 'ForceSingle' or 'ForceMulti' your choice will be respected but this might not respect the
         * Fiori guidelines.
         */
        selectionMode?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Defines the number of records to be initially requested from the back end.
         */
        threshold?:
          | int
          | sap.ui.base.ManagedObject.PropertyBindingInfo
          | `{${string}}`;

        /**
         * Defines the type of table that will be used by the building block to render the data. This setting is
         * defined by the framework.
         * Allowed value is `TreeTable`.
         */
        type?: string | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Controls the kind of variant management that should be enabled for the table.
         * Allowed value is `Control`.
         *
         * If set with value `Control`, a variant management control is seen within the table and the table is linked
         * to this.
         *
         * If not set with any value, control level variant management is not available for this table.
         */
        variantManagement?:
          | string
          | sap.ui.base.ManagedObject.PropertyBindingInfo;

        /**
         * Indicates if the column header should be a part of the width calculation.
         */
        widthIncludingColumnHeader?:
          | boolean
          | sap.ui.base.ManagedObject.PropertyBindingInfo
          | `{${string}}`;

        /**
         * Aggregate actions of the table.
         */
        actions?:
          | Array<sap.fe.macros.table.ActionGroup | sap.fe.macros.table.Action>
          | sap.fe.macros.table.ActionGroup
          | sap.fe.macros.table.Action
          | sap.ui.base.ManagedObject.AggregationBindingInfo
          | `{${string}}`;

        /**
         * A set of options that can be configured to control the aggregation behavior
         */
        analyticalConfiguration?: sap.fe.macros.table.AnalyticalConfiguration;

        /**
         * Aggregate columns of the table.
         */
        columns?:
          | Array<
              sap.fe.macros.table.ColumnOverride | sap.fe.macros.table.Column
            >
          | sap.fe.macros.table.ColumnOverride
          | sap.fe.macros.table.Column
          | sap.ui.base.ManagedObject.AggregationBindingInfo
          | `{${string}}`;

        /**
         * Aggregate mass edit of the table.
         */
        massEdit?: sap.fe.macros.table.MassEdit;

        /**
         * Aggregation to forward the IllustratedMessage control to the mdc control.
         */
        noData?:
          | sap.m.Text
          | sap.m.IllustratedMessage
          | sap.ui.base.ManagedObject.PropertyBindingInfo
          | `{${string}}`;

        /**
         * Aggregate quickVariantSelection of the table.
         */
        quickVariantSelection?: sap.fe.macros.table.QuickVariantSelection;
      }

      /**
       * Parameters of the Chart#selectionChange event.
       */
      interface Chart$SelectionChangeEventParameters {}

      /**
       * Parameters of the Field#change event.
       */
      interface Field$ChangeEventParameters {}

      /**
       * Parameters of the Field#liveChange event.
       */
      interface Field$LiveChangeEventParameters {}

      /**
       * Parameters of the KPITag#press event.
       */
      interface KPITag$PressEventParameters {}

      /**
       * Parameters of the MessageButton#visibilityChange event.
       */
      interface MessageButton$VisibilityChangeEventParameters {}

      /**
       * Parameters of the FilterBar#afterClear event.
       */
      interface FilterBar$AfterClearEventParameters {}

      /**
       * Parameters of the FilterBar#filterChanged event.
       */
      interface FilterBar$FilterChangedEventParameters {}

      /**
       * Parameters of the FilterBar#search event.
       */
      interface FilterBar$SearchEventParameters {}

      /**
       * Parameters of the Table#beforeRebindTable event.
       */
      interface Table$BeforeRebindTableEventParameters {}

      /**
       * Parameters of the Table#rowPress event.
       */
      interface Table$RowPressEventParameters {}

      /**
       * Parameters of the Table#selectionChange event.
       */
      interface Table$SelectionChangeEventParameters {}

      /**
       * Parameters of the TreeTable#beforeRebindTable event.
       */
      interface TreeTable$BeforeRebindTableEventParameters {}

      /**
       * Parameters of the TreeTable#rowPress event.
       */
      interface TreeTable$RowPressEventParameters {}

      /**
       * Parameters of the TreeTable#selectionChange event.
       */
      interface TreeTable$SelectionChangeEventParameters {}

      /**
       * Building block used to create a chart based on the metadata provided by OData V4.
       * {@link demo:sap/fe/core/fpmExplorer/index.html#/buildingBlocks/chart/chartDefault Overview of Building Blocks}
       *
       *
       * Usually, a contextPath and metaPath is expected.
       *
       * Usage example:
       *
       * ```javascript
       *
       * <macros:Chart id="MyChart" contextPath="/RootEntity" metaPath="@com.sap.vocabularies.UI.v1.Chart" />
       * ```
       */
      class Chart
        extends sap.fe.macros.MacroAPI
        implements
          /* was: sap.fe.core.controllerextensions.viewState.IViewStateContributor */ Object
      {
        __implements__sap_fe_core_controllerextensions_viewState_IViewStateContributor: boolean;

        /**
         * Gets current value of property contextPath.
         *
         *
         * @returns Value of property `contextPath`
         */
        getContextPath(): string;
        /**
         * Gets the key of the current variant in the associated variant management.
         *
         *
         * @returns Variant key of {@link sap.ui.fl.variants.VariantManagement } applied to the chart
         */
        getCurrentVariantKey(): null | string;
        /**
         * Gets current value of property filterBar.
         *
         *
         * @returns Value of property `filterBar`
         */
        getFilterBar(): string;
        /**
         * Gets current value of property header.
         *
         *
         * @returns Value of property `header`
         */
        getHeader(): string;
        /**
         * Gets current value of property headerVisible.
         *
         *
         * @returns Value of property `headerVisible`
         */
        getHeaderVisible(): boolean;
        /**
         * Gets current value of property metaPath.
         *
         *
         * @returns Value of property `metaPath`
         */
        getMetaPath(): string;
        /**
         * Gets current value of property personalization.
         *
         *
         * @returns Value of property `personalization`
         */
        getPersonalization(): string;
        /**
         * Get the presentation variant that is currently applied on the chart.
         *
         *
         * @returns The presentation variant {@link sap.fe.navigation.PresentationVariant } applied to the chart
         */
        getPresentationVariant(): Promise<sap.fe.navigation.PresentationVariant>;
        /**
         * Gets contexts from the chart that have been selected by the user.
         *
         *
         * @returns Contexts of the rows selected by the user
         */
        getSelectedContexts(): sap.ui.model.odata.v4.Context[];
        /**
         * Gets current value of property selectionMode.
         *
         *
         * @returns Value of property `selectionMode`
         */
        getSelectionMode(): string;
        /**
         * Get the selection variant from the chart. This function considers only the selection variant applied
         * at the control level.
         *
         *
         * @returns A promise that resolves with {@link sap.fe.navigation.SelectionVariant }.
         */
        getSelectionVariant(): Promise<sap.fe.navigation.SelectionVariant>;
        /**
         * Gets current value of property variantManagement.
         *
         *
         * @returns Value of property `variantManagement`
         */
        getVariantManagement(): string;
        /**
         * Gets current value of property contextPath.
         *
         *
         * @returns Value of property `contextPath`
         */
        setContextPath(): string;
        /**
         * Sets the variant of the provided key in the associated variant management.
         */
        setCurrentVariantKey(
          /**
           * The variant key of {@link sap.ui.fl.variants.VariantManagement } to be set
           */
          key: string
        ): void;
        /**
         * Gets current value of property filterBar.
         *
         *
         * @returns Value of property `filterBar`
         */
        setFilterBar(): string;
        /**
         * Gets current value of property header.
         *
         *
         * @returns Value of property `header`
         */
        setHeader(): string;
        /**
         * Gets current value of property headerVisible.
         *
         *
         * @returns Value of property `headerVisible`
         */
        setHeaderVisible(): boolean;
        /**
         * Gets current value of property metaPath.
         *
         *
         * @returns Value of property `metaPath`
         */
        setMetaPath(): string;
        /**
         * Gets current value of property personalization.
         *
         *
         * @returns Value of property `personalization`
         */
        setPersonalization(): string;
        /**
         * Set the presentation variant for the mdc chart.
         * The json format retrieved by using the get PresentationVariant button in the linked FPM sample should
         * be followed while trying to set the PresentationVariant as needed.
         * The values dimensions, measures and other properties should also be given in the valid format and null
         * or empty values should be avoided.
         * One dimension attribute should have only one role associated with it on a given chart.
         */
        setPresentationVariant(
          /**
           * the presentation variant {@link sap.fe.navigation.PresentationVariant } to be set
           */
          presentationVariant: sap.fe.navigation.PresentationVariant
        ): Promise<void>;
        /**
         * Gets current value of property selectionMode.
         *
         *
         * @returns Value of property `selectionMode`
         */
        setSelectionMode(): string;
        /**
         * Sets {@link sap.fe.navigation.SelectionVariant } to the chart. Note: setSelectionVariant will clear existing
         * filters and then apply the SelectionVariant values.
         *
         *
         * @returns A promise for asynchronous handling
         */
        setSelectionVariant(
          /**
           * The {@link sap.fe.navigation.SelectionVariant } to apply to the chart
           */
          selectionVariant: sap.fe.navigation.SelectionVariant,
          /**
           * Optional. If true, we will use the associated text property values (if they're available in the SelectionVariant)
           * to display the filter value descriptions, instead of loading them from the backend
           */
          prefillDescriptions?: boolean
        ): Promise<any>;
        /**
         * Gets current value of property variantManagement.
         *
         *
         * @returns Value of property `variantManagement`
         */
        setVariantManagement(): string;
      }
      /**
       * API to add parameters to the collection binding info.
       */
      class CollectionBindingInfo {
        /**
         * Adds a filter to the filters already present in the binding info.
         */
        addFilter(
          /**
           * The {@link sap.ui.model.Filter "filter"} to add
           */
          customFilter: sap.ui.model.Filter
        ): void;
        /**
         * Adds parameters to the select query.
         */
        addSelect(
          /**
           * The list or properties to add to the query
           */
          parameters: string[]
        ): void;
        /**
         * Adds a sorter to the sorter(s) already present, or create one if none exists.
         */
        addSorter(
          /**
           * The {@link sap.ui.model.Sorter "sorter"} to add to the query
           */
          sorter: sap.ui.model.Sorter
        ): void;
        /**
         * Attach the events to the table binding.
         */
        attachEvent(
          /**
           * The event ID to attach the callback to
           */
          eventId: string,
          /**
           * The callback function to be executed when the event is triggered
           */
          callback: Function,
          /**
           * The listener object that will be used as the context for the callback function
           */
          listener?: object,
          /**
           * Data that will be passed to the callback function when the event is triggered
           */
          data?: object
        ): void;
        /**
         * Retrieve the 'serialized' binding info, useful if you want to create your own binding
         *
         *
         * @returns The {@link sap.fe.macros.CollectionBindingInfo "CollectionBindingInfo"}
         */
        getBindingInfo(): /* was: sap.fe.macros.CollectionBindingInfo.CollectionBindingInfo */ any;
        /**
         * Returns the current filters applied to the Table.
         *
         *
         * @returns The {@link sap.ui.model.Filter "filters"} on the table
         */
        getFilters(): sap.ui.model.Filter | undefined;
        /**
         * Returns the current sorters of the Table.
         *
         *
         * @returns The {@link sap.ui.model.Sorter "sorters"} on the table
         */
        getSorters(): sap.ui.model.Sorter[] | undefined;
      }
      /**
       * Building block for creating a field based on the metadata provided by OData V4.
       *
       *
       * Usually, a DataField or DataPoint annotation is expected, but the field can also be used to display a
       * property from the entity type.
       * When creating a Field building block, you must provide an ID to ensure everything works correctly.
       *
       * Usage example:
       *
       * ```javascript
       *
       * <macros:Field id="MyField" metaPath="MyProperty" />
       * ```
       *
       * Overview of Building Blocks
       */
      class Field extends sap.fe.macros.MacroAPI {
        /**
         * Adds a message to the field.
         *
         *
         * @returns The id of the message
         */
        addMessage(
          /**
           * The parameters to create message
           */
          parameters: {
            /**
             * Message description
             */
            description?: string;
            /**
             * Message text
             */
            message?: string;
            /**
             * True if the message is persistent
             */
            persistent?: boolean;
            /**
             * Type of the message
             */
            type?: /* was: sap.ui.core.message.MessageType */ any;
          }
        ): string;
        /**
         * Gets the current enablement state of the field.
         *
         *
         * @returns Boolean value with the enablement state
         */
        getEnabled(): boolean;
        /**
         * Retrieves the current value of the field.
         *
         *
         * @returns The current value of the field
         */
        getValue(): boolean | float | string | undefined;
        /**
         * Removes a message from the field.
         */
        removeMessage(
          /**
           * The id of the message
           */
          id: string
        ): void;
        /**
         * Sets the current enablement state of the field.
         *
         *
         * @returns The current field reference
         */
        setEnabled(): sap.ui.core.Control;
        /**
         * Sets the current value of the field.
         *
         *
         * @returns The current field reference
         */
        setValue(): sap.ui.core.Control;
      }
      /**
       * Building block used to create a KPI tag.
       */
      class KPITag extends sap.fe.core.buildingBlocks.BuildingBlock {}
      /**
       * Base API control for building blocks.
       */
      class MacroAPI
        extends sap.fe.core.buildingBlocks.BuildingBlock
        implements sap.ui.core.IFormContent
      {
        __implements__sap_ui_core_IFormContent: boolean;
      }
      /**
       * Building block used to show bound messages.
       * The Message Button Building Block gets the bound messages from the MessageModel.
       * Usage example:
       *
       * ```javascript
       *
       * <macros:MessageButton visibilityChange=".handler.onMessageButtonVisibilityChange" />
       * ```
       */
      class MessageButton extends sap.fe.core.buildingBlocks.BuildingBlock {}
      /**
       * Building block used to create a MicroChart based on the metadata provided by OData V4.
       * {@link demo:sap/fe/core/fpmExplorer/index.html#/buildingBlocks/microchart/ Overview of Micro Chart Building Block}
       *
       *
       * Usually, a contextPath and metaPath is expected.
       *
       * Usage example:
       *
       * ```javascript
       *
       * <macros:MicroChart id="MyMicroChart" contextPath="/RootEntity" metaPath="@com.sap.vocabularies.UI.v1.Chart" />
       * ```
       *
       *
       * ```javascript
       *
       * sap.ui.require(["sap/fe/macros/MicroChart"], function(MicroChart) {
       * 	 ...
       * 	 new MicroChart("myMicroChart", {metaPath:"@com.sap.vocabularies.UI.v1.Chart"})
       * })
       * ```
       *
       *
       *
       * @since 1.93.0
       */
      class MicroChart extends sap.fe.core.buildingBlocks.BuildingBlock {
        /**
         * Gets current value of property contextPath.
         *
         *
         * @returns Value of property `contextPath`
         */
        getContextPath(): string;
        /**
         * Gets current value of property hideOnNoData.
         *
         *
         * @returns Value of property `hideOnNoData`
         */
        getHideOnNoData(): boolean;
        /**
         * Gets current value of property metaPath.
         *
         *
         * @returns Value of property `metaPath`
         */
        getMetaPath(): string;
        /**
         * Gets current value of property showOnlyChart.
         *
         *
         * @returns Value of property `showOnlyChart`
         */
        getShowOnlyChart(): boolean;
        /**
         * Gets current value of property size.
         *
         *
         * @returns Value of property `size`
         */
        getSize(): string;
        /**
         * Gets current value of property contextPath.
         *
         *
         * @returns Value of property `contextPath`
         */
        setContextPath(): string;
        /**
         * Gets current value of property hideOnNoData.
         *
         *
         * @returns Value of property `hideOnNoData`
         */
        setHideOnNoData(): boolean;
        /**
         * Gets current value of property metaPath.
         *
         *
         * @returns Value of property `metaPath`
         */
        setMetaPath(): string;
        /**
         * Gets current value of property showOnlyChart.
         *
         *
         * @returns Value of property `showOnlyChart`
         */
        setShowOnlyChart(): boolean;
        /**
         * Gets current value of property size.
         *
         *
         * @returns Value of property `size`
         */
        setSize(): string;
      }
      /**
       * Building block for creating a MultiValueField based on the metadata provided by OData V4.
       *
       *
       * The MultiValueField can be used to display either a DataField or Property directly. It has to point to
       * a collection property.
       *
       *
       * Usage example:
       *
       * ```javascript
       *
       * <macro:MultiValueField
       * id="SomeUniqueIdentifier"
       * contextPath="{entitySet>}"
       * metaPath="{dataField>}"
       * />
       * ```
       *
       *
       * @since 1.118.0
       */
      class MultiValueField extends sap.fe.core.buildingBlocks.BuildingBlock {}
      /**
       * Provides a Page building block that can be used to create a page with a title and content
       * By default, the page comes with an ObjectTitle
       */
      class Page extends sap.fe.core.buildingBlocks.BuildingBlock {}
      /**
       * Building block used to create a paginator control.
       * Usage example:
       *
       * ```javascript
       *
       * <macros:Paginator />
       * ```
       *
       *
       *
       * @since 1.94.0
       */
      class Paginator extends sap.fe.core.buildingBlocks.BuildingBlock {}
      /**
       * Building block that exposes the RichTextEditor UI5 control.
       * It's used to enter formatted text, and uses the third-party component called TinyMCE.
       *
       *
       * @since 1.117.0
       */
      class RichTextEditor extends sap.fe.core.buildingBlocks.BuildingBlock {}
      /**
       * Metadata-driven building block that exposes the RichTextEditor UI5 control.
       * It's used to enter formatted text and uses the third-party component called TinyMCE.
       *
       *
       * @since 1.117.0
       */
      class RichTextEditorWithMetadata extends sap.fe.macros.RichTextEditor {}
      /**
       * Building block used to create the ‘Share’ functionality.
       *
       *
       * Please note that the 'Share in SAP Jam' option is only available on platforms that are integrated with
       * SAP Jam.
       *
       *
       * If you are consuming this macro in an environment where the SAP Fiori launchpad is not available, then
       * the 'Save as Tile' option is not visible.
       *
       * Usage example:
       *
       * ```javascript
       *
       * <macros:Share
       * id="someID"
       * visible="true"
       * />
       * ```
       *
       * {@link demo:sap/fe/core/fpmExplorer/index.html#/buildingBlocks/features/shareDefault Overview of Building Blocks}
       *
       *
       * @since 1.93.0
       */
      class Share extends sap.fe.core.buildingBlocks.BuildingBlock {}
      /**
       * Building block used to create a Variant Management based on the metadata provided by OData V4.
       * Usage example:
       *
       * ```javascript
       *
       * <macro:VariantManagement
       * id="SomeUniqueIdentifier"
       * for="{listOfControlIds>}"
       * />
       * ```
       *
       * {@link demo:sap/fe/core/fpmExplorer/index.html#/buildingBlocks/filterBar/filterBarVMWithTable Overview of Building Blocks}
       */
      class VariantManagement extends sap.fe.core.buildingBlocks
        .BuildingBlock {}
      /**
       * Building block for adding overflow toolbar buttons to integrate into the flexible column layout support
       * from Fiori elements.
       * Usage example:
       *
       * ```javascript
       *
       * <macros:FlexibleColumnLayoutActions />
       * ```
       *
       *
       *
       * @since 1.93.0
       */
      class FlexibleColumnLayoutActions extends sap.ui.core.Control {}
      /**
       * Building block for creating a FilterBar based on the metadata provided by OData V4.
       * {@link demo:sap/fe/core/fpmExplorer/index.html#/buildingBlocks/filterBar/filterBarDefault Overview of Building Blocks}
       *
       *
       * Usually, a SelectionFields annotation is expected.
       *
       * Usage example:
       *
       * ```javascript
       *
       * <macros:FilterBar id="MyFilterBar" metaPath="@com.sap.vocabularies.UI.v1.SelectionFields" />
       * ```
       */
      class FilterBar extends sap.fe.macros.MacroAPI {
        /**
         * Get the Active Filters Text Summary for the filter bar.
         *
         *
         * @returns Active filters summary as text
         */
        getActiveFiltersText(): string;
        /**
         * Gets the key of the current variant in the associated variant management.
         *
         *
         * @returns Key of the currently selected variant. In case the model is not yet set, `null` will be returned.
         */
        getCurrentVariantKey(): null | string;
        /**
         * Determines whether the field is enabled or disabled.
         *
         *
         * @returns Whether the filterField is enabled or disabled.
         */
        getFilterFieldEnabled(
          /**
           * Name of the field.
           */
          name: string
        ): boolean;
        /**
         * Gets the visibility of a filter field.
         *
         *
         * @returns A {@link Promise } that resolves to check whether the filter field is visible or not.
         */
        getFilterFieldVisible(
          /**
           * The path to the property as a condition path
           */
          conditionPath: string
        ): Promise<boolean>;
        /**
         * Provides all the filters that are currently active
         * along with the search expression.
         *
         *
         * @returns An array of active filters and the search expression.
         */
        getFilters(): object;
        /**
         * Get the selection variant from the filter bar.
         * Note: This method returns all the filter values that are set in the filter bar, including the text from
         * the search field (with $search as the property name). However, it doesn't return any filter field condition
         * that uses a custom operator.
         *
         *
         * @returns A promise which resolves with a {@link sap.fe.navigation.SelectionVariant }
         */
        getSelectionVariant(): Promise<sap.fe.navigation.SelectionVariant>;
        /**
         * Sets the new selected variant in the associated variant management.
         */
        setCurrentVariantKey(
          /**
           * Key of the variant that should be selected. If the passed key doesn't identify a variant, it will be
           * ignored.
           */
          key: string
        ): void;
        /**
         * Sets the enablement of the field.
         */
        setFilterFieldEnabled(
          /**
           * Name of the field that should be enabled or disabled.
           */
          name: string,
          /**
           * Whether the field should be enabled or disabled.
           */
          enabled: boolean
        ): void;
        /**
         * Shows or hides any filter field from the filter bar.
         * The property will not be hidden inside the adaptation dialog and may be re-added.
         *
         *
         * @returns A {@link Promise } resolving once the change in visibility was applied
         */
        setFilterFieldVisible(
          /**
           * The path to the property as a condition path
           */
          conditionPath: string,
          /**
           * Whether it should be shown or hidden
           */
          visible: boolean
        ): Promise<void>;
        /**
         * Set the filter values for the given property in the filter bar.
         * The filter values can be either a single value or an array of values.
         * Each filter value must be represented as a primitive value.
         *
         *
         * @returns A promise for asynchronous handling
         */
        setFilterValues(
          /**
           * The path to the property as a condition path
           */
          sConditionPath: string,
          /**
           * The operator to be used (optional) - if not set, the default operator (EQ) will be used
           */
          sOperator: string | undefined,
          /**
           * The values to be applied
           */
          vValues?:
            | boolean
            | boolean[]
            | number
            | number[]
            | string
            | string[]
            | undefined
        ): Promise<void>;
        /**
         * Sets {@link sap.fe.navigation.SelectionVariant } to the filter bar. Note: setSelectionVariant will clear
         * existing filters and then apply the SelectionVariant values.
         * Note: This method cannot set the search field text or any filter field condition that relies on a custom
         * operator.
         *
         *
         * @returns A promise for asynchronous handling
         */
        setSelectionVariant(
          /**
           * The {@link sap.fe.navigation.SelectionVariant } to apply to the filter bar
           */
          selectionVariant: sap.fe.navigation.SelectionVariant,
          /**
           * Optional. If true, we will use the associated text property values (if they're available in the selectionVariant)
           * to display the filter value descriptions, instead of loading them from the backend
           */
          prefillDescriptions?: boolean
        ): Promise<any>;
        /**
         * Triggers the API search on the filter bar.
         *
         *
         * @returns Returns a promise which resolves if filter go is triggered successfully; otherwise gets rejected.
         */
        triggerSearch(): Promise<object | undefined>;
      }
      /**
       * Building block for creating a Form based on the metadata provided by OData V4.
       *
       *
       * It is designed to work based on a FieldGroup annotation but can also work if you provide a ReferenceFacet
       * or a CollectionFacet
       *
       * Usage example:
       *
       * ```javascript
       *
       * <macros:Form id="MyForm" metaPath="@com.sap.vocabularies.UI.v1.FieldGroup#GeneralInformation" />
       * ```
       */
      class Form extends sap.ui.core.Control {}
      /**
       * Building block used to create a table based on the metadata provided by OData V4.
       *
       *
       * Usually, a LineItem, PresentationVariant, or SelectionPresentationVariant annotation is expected, but
       * the Table building block can also be used to display an EntitySet.
       *
       *
       * If a PresentationVariant is specified, then it must have UI.LineItem as the first property of the Visualizations.
       *
       *
       * If a SelectionPresentationVariant is specified, then it must contain a valid PresentationVariant that
       * also has a UI.LineItem as the first property of the Visualizations.
       * Usage example:
       *
       * ```javascript
       *
       * <macros:Table id="MyTable" metaPath="@com.sap.vocabularies.UI.v1.LineItem" />
       * ```
       *
       * {@link demo:sap/fe/core/fpmExplorer/index.html#/buildingBlocks/table/tableDefault Overview of Table Building Blocks}
       */
      class Table extends sap.fe.macros.MacroAPI {
        /**
         * Adds a message to the table.
         * The message applies to the whole table and not to an individual table row.
         *
         *
         *
         * @returns Promise The ID of the message
         */
        addMessage(
          /**
           * The parameters to create the message
           */
          parameters: {
            /**
             * Message description
             */
            description?: string;
            /**
             * Message text
             */
            message?: string;
            /**
             * True if the message is persistent
             */
            persistent?: boolean;
            /**
             * Message type
             */
            type?: /* was: sap.ui.core.message.MessageType */ any;
          }
        ): Promise<string>;
        /**
         * Get the count of the row binding of the table.
         *
         *
         * @returns The count of the row binding
         */
        getCount(): number | undefined;
        /**
         * Get the variant management applied to the table.
         *
         *
         * @returns Key of the currently selected variant. In case the model is not yet set, `null` will be returned.
         */
        getCurrentVariantKey(): null | string;
        /**
         * Get the fields that should be ignored when generating the table.
         *
         * @since 1.124.0
         * @experimental As of version 1.124.0.
         *
         * @returns The value of the ignoredFields property
         */
        getIgnoredFields(): string;
        /**
         * Get the presentation variant that is currently applied on the table.
         *
         *
         * @returns The presentation variant applied to the table
         */
        getPresentationVariant(): Promise<sap.fe.navigation.PresentationVariant>;
        /**
         * Gets contexts from the table that have been selected by the user.
         *
         *
         * @returns Contexts of the rows selected by the user
         */
        getSelectedContexts(): sap.ui.model.odata.v4.Context[];
        /**
         * Get the selection variant from the table. This function considers only the selection variant applied
         * at the control level.
         *
         *
         * @returns A promise which resolves with {@link sap.fe.navigation.SelectionVariant }
         */
        getSelectionVariant(): Promise<sap.fe.navigation.SelectionVariant>;
        /**
         * Hide the columns with the given column keys by setting their availability to Default.
         *
         * @since 1.124.0
         * @experimental As of version 1.124.0.
         *
         * @returns Promise
         */
        hideColumns(
          /**
           * The keys for the columns to hide
           */
          columnKeys: string[]
        ): Promise<void>;
        /**
         * Requests a refresh of the table.
         */
        refresh(): void;
        /**
         * Removes a message from the table.
         */
        removeMessage(
          /**
           * The id of the message
           */
          id: string
        ): void;
        /**
         * Set a variant management to the table.
         */
        setCurrentVariantKey(
          /**
           * Key of the variant that should be selected. If the passed key doesn't identify a variant, it will be
           * ignored.
           */
          key: string
        ): void;
        /**
         * Sets the fields that should be ignored when generating the table.
         *
         * @since 1.124.0
         * @experimental As of version 1.124.0.
         *
         * @returns Reference to this in order to allow method chaining
         */
        setIgnoredFields(
          /**
           * The fields to ignore
           */
          ignoredFields: string
        ): this;
        /**
         * Set a new presentation variant to the table.
         */
        setPresentationVariant(
          /**
           * The new presentation variant that is to be set on the table.
           */
          tablePV: sap.fe.navigation.PresentationVariant
        ): Promise<void>;
        /**
         * Sets {@link sap.fe.navigation.SelectionVariant } to the table. Note: setSelectionVariant will clear existing
         * filters and then apply the SelectionVariant values.
         *
         *
         * @returns A promise for asynchronous handling
         */
        setSelectionVariant(
          /**
           * The {@link sap.fe.navigation.SelectionVariant } to apply to the table
           */
          selectionVariant: sap.fe.navigation.SelectionVariant,
          /**
           * Optional. If true, we will use the associated text property values (if they're available in the SelectionVariant)
           * to display the filter value descriptions, instead of loading them from the backend
           */
          prefillDescriptions?: boolean
        ): Promise<any>;
        /**
         * Show the columns with the given column keys by setting their availability to Default.
         *
         * @since 1.124.0
         * @experimental As of version 1.124.0.
         *
         * @returns Promise
         */
        showColumns(
          /**
           * The keys for the columns to show
           */
          columnKeys: string[]
        ): Promise<void>;
      }
      /**
       * Building block used to create a tree table based on the metadata provided by OData V4.
       * {@link demo:sap/fe/core/fpmExplorer/index.html#/buildingBlocks/table/treeTable Overview of Tree Table Building Block}
       */
      class TreeTable extends sap.fe.macros.MacroAPI {
        /**
         * Adds a message to the table.
         * The message applies to the whole table and not to an individual table row.
         *
         *
         *
         * @returns Promise The ID of the message
         */
        addMessage(
          /**
           * The parameters to create the message
           */
          parameters: {
            /**
             * Message description
             */
            description?: string;
            /**
             * Message text
             */
            message?: string;
            /**
             * True if the message is persistent
             */
            persistent?: boolean;
            /**
             * Message type
             */
            type?: /* was: sap.ui.core.message.MessageType */ any;
          }
        ): Promise<string>;
        /**
         * Get the count of the row binding of the table.
         *
         *
         * @returns The count of the row binding
         */
        getCount(): number | undefined;
        /**
         * Get the variant management applied to the table.
         *
         *
         * @returns Key of the currently selected variant. In case the model is not yet set, `null` will be returned.
         */
        getCurrentVariantKey(): null | string;
        /**
         * Get the fields that should be ignored when generating the table.
         *
         * @since 1.124.0
         * @experimental As of version 1.124.0.
         *
         * @returns The value of the ignoredFields property
         */
        getIgnoredFields(): string;
        /**
         * Get the presentation variant that is currently applied on the table.
         *
         *
         * @returns The presentation variant applied to the table
         */
        getPresentationVariant(): Promise<sap.fe.navigation.PresentationVariant>;
        /**
         * Gets contexts from the table that have been selected by the user.
         *
         *
         * @returns Contexts of the rows selected by the user
         */
        getSelectedContexts(): sap.ui.model.odata.v4.Context[];
        /**
         * Get the selection variant from the table. This function considers only the selection variant applied
         * at the control level.
         *
         *
         * @returns A promise which resolves with {@link sap.fe.navigation.SelectionVariant }
         */
        getSelectionVariant(): Promise<sap.fe.navigation.SelectionVariant>;
        /**
         * Hide the columns with the given column keys by setting their availability to Default.
         *
         * @since 1.124.0
         * @experimental As of version 1.124.0.
         *
         * @returns Promise
         */
        hideColumns(
          /**
           * The keys for the columns to hide
           */
          columnKeys: string[]
        ): Promise<void>;
        /**
         * Requests a refresh of the table.
         */
        refresh(): void;
        /**
         * Removes a message from the table.
         */
        removeMessage(
          /**
           * The id of the message
           */
          id: string
        ): void;
        /**
         * Set a variant management to the table.
         */
        setCurrentVariantKey(
          /**
           * Key of the variant that should be selected. If the passed key doesn't identify a variant, it will be
           * ignored.
           */
          key: string
        ): void;
        /**
         * Sets the fields that should be ignored when generating the table.
         *
         * @since 1.124.0
         * @experimental As of version 1.124.0.
         *
         * @returns Reference to this in order to allow method chaining
         */
        setIgnoredFields(
          /**
           * The fields to ignore
           */
          ignoredFields: string
        ): this;
        /**
         * Set a new presentation variant to the table.
         */
        setPresentationVariant(
          /**
           * The new presentation variant that is to be set on the table.
           */
          tablePV: sap.fe.navigation.PresentationVariant
        ): Promise<void>;
        /**
         * Sets {@link sap.fe.navigation.SelectionVariant } to the table. Note: setSelectionVariant will clear existing
         * filters and then apply the SelectionVariant values.
         *
         *
         * @returns A promise for asynchronous handling
         */
        setSelectionVariant(
          /**
           * The {@link sap.fe.navigation.SelectionVariant } to apply to the table
           */
          selectionVariant: sap.fe.navigation.SelectionVariant,
          /**
           * Optional. If true, we will use the associated text property values (if they're available in the SelectionVariant)
           * to display the filter value descriptions, instead of loading them from the backend
           */
          prefillDescriptions?: boolean
        ): Promise<any>;
        /**
         * Show the columns with the given column keys by setting their availability to Default.
         *
         * @since 1.124.0
         * @experimental As of version 1.124.0.
         *
         * @returns Promise
         */
        showColumns(
          /**
           * The keys for the columns to show
           */
          columnKeys: string[]
        ): Promise<void>;
      }

      /**
       * Event object of the Chart#selectionChange event.
       */
      type Chart$SelectionChangeEvent = sap.ui.base.Event<
        Chart$SelectionChangeEventParameters,
        Chart
      >;

      /**
       * Event object of the Field#change event.
       */
      type Field$ChangeEvent = sap.ui.base.Event<
        Field$ChangeEventParameters,
        Field
      >;

      /**
       * Event object of the Field#liveChange event.
       */
      type Field$LiveChangeEvent = sap.ui.base.Event<
        Field$LiveChangeEventParameters,
        Field
      >;

      /**
       * Event object of the KPITag#press event.
       */
      type KPITag$PressEvent = sap.ui.base.Event<
        KPITag$PressEventParameters,
        KPITag
      >;

      /**
       * Event object of the MessageButton#visibilityChange event.
       */
      type MessageButton$VisibilityChangeEvent = sap.ui.base.Event<
        MessageButton$VisibilityChangeEventParameters,
        MessageButton
      >;

      /**
       * Event object of the FilterBar#afterClear event.
       */
      type FilterBar$AfterClearEvent = sap.ui.base.Event<
        FilterBar$AfterClearEventParameters,
        FilterBar
      >;

      /**
       * Event object of the FilterBar#filterChanged event.
       */
      type FilterBar$FilterChangedEvent = sap.ui.base.Event<
        FilterBar$FilterChangedEventParameters,
        FilterBar
      >;

      /**
       * Event object of the FilterBar#search event.
       */
      type FilterBar$SearchEvent = sap.ui.base.Event<
        FilterBar$SearchEventParameters,
        FilterBar
      >;

      /**
       * Event object of the Table#beforeRebindTable event.
       */
      type Table$BeforeRebindTableEvent = sap.ui.base.Event<
        Table$BeforeRebindTableEventParameters,
        Table
      >;

      /**
       * Event object of the Table#rowPress event.
       */
      type Table$RowPressEvent = sap.ui.base.Event<
        Table$RowPressEventParameters,
        Table
      >;

      /**
       * Event object of the Table#selectionChange event.
       */
      type Table$SelectionChangeEvent = sap.ui.base.Event<
        Table$SelectionChangeEventParameters,
        Table
      >;

      /**
       * Event object of the TreeTable#beforeRebindTable event.
       */
      type TreeTable$BeforeRebindTableEvent = sap.ui.base.Event<
        TreeTable$BeforeRebindTableEventParameters,
        TreeTable
      >;

      /**
       * Event object of the TreeTable#rowPress event.
       */
      type TreeTable$RowPressEvent = sap.ui.base.Event<
        TreeTable$RowPressEventParameters,
        TreeTable
      >;

      /**
       * Event object of the TreeTable#selectionChange event.
       */
      type TreeTable$SelectionChangeEvent = sap.ui.base.Event<
        TreeTable$SelectionChangeEventParameters,
        TreeTable
      >;
    }
  }

  interface IUI5DefineDependencyNames {
    "sap/fe/macros/Chart": undefined;

    "sap/fe/macros/chart/Action": undefined;

    "sap/fe/macros/chart/ActionGroup": undefined;

    "sap/fe/macros/chart/Chart": undefined;

    "sap/fe/macros/CollectionBindingInfo": undefined;

    "sap/fe/macros/controls/BuildingBlockObjectProperty": undefined;

    "sap/fe/macros/controls/BuildingBlockWithTemplating": undefined;

    "sap/fe/macros/controls/section/ISingleSectionContributor": undefined;

    "sap/fe/macros/fcl/FlexibleColumnLayoutActions.block": undefined;

    "sap/fe/macros/Field": undefined;

    "sap/fe/macros/field/Field": undefined;

    "sap/fe/macros/field/FieldFormatOptions": undefined;

    "sap/fe/macros/filterBar/FilterBar": undefined;

    "sap/fe/macros/filterBar/FilterBarAPI": undefined;

    "sap/fe/macros/filterBar/FilterField": undefined;

    "sap/fe/macros/form/Form.block": undefined;

    "sap/fe/macros/FormElement": undefined;

    "sap/fe/macros/KPITag": undefined;

    "sap/fe/macros/library": undefined;

    "sap/fe/macros/MacroAPI": undefined;

    "sap/fe/macros/MessageButton": undefined;

    "sap/fe/macros/MicroChart": undefined;

    "sap/fe/macros/microchart/MicroChart": undefined;

    "sap/fe/macros/MultiValueField": undefined;

    "sap/fe/macros/Page": undefined;

    "sap/fe/macros/Paginator": undefined;

    "sap/fe/macros/RichTextEditor": undefined;

    "sap/fe/macros/richtexteditor/ButtonGroup": undefined;

    "sap/fe/macros/richtexteditor/Plugin": undefined;

    "sap/fe/macros/RichTextEditorWithMetadata": undefined;

    "sap/fe/macros/Share": undefined;

    "sap/fe/macros/share/ShareOptions": undefined;

    "sap/fe/macros/table/Action": undefined;

    "sap/fe/macros/table/ActionGroup": undefined;

    "sap/fe/macros/table/ActionGroupOverride": undefined;

    "sap/fe/macros/table/ActionOverride": undefined;

    "sap/fe/macros/table/AnalyticalConfiguration": undefined;

    "sap/fe/macros/table/Column": undefined;

    "sap/fe/macros/table/ColumnExportSettings": undefined;

    "sap/fe/macros/table/ColumnOverride": undefined;

    "sap/fe/macros/table/MassEdit": undefined;

    "sap/fe/macros/table/QuickVariantSelection": undefined;

    "sap/fe/macros/table/Table": undefined;

    "sap/fe/macros/table/Table.block": undefined;

    "sap/fe/macros/table/TableCreationOptions": undefined;

    "sap/fe/macros/table/TreeTable": undefined;

    "sap/fe/macros/table/TreeTable.block": undefined;

    "sap/fe/macros/table/TreeTableCreationOptions": undefined;

    "sap/fe/macros/VariantManagement": undefined;
  }
}
